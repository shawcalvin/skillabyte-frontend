[
  {
    "pageId": "ADVANCED_GENAI_TOPICS\\learning-module\\0-table-of-contents.tsx",
    "text": "Table of Contents\n\n----------------------------------------\n\nWhat is GenAI?2GenAI Model Development3Pre-Training and Post-Training Techniques4Deployment Strategies: Tool Integration5Runtime Strategies: Prompting6Deployment Strategies: Multi-Agent Systems7Review Quiz8Runtime Strategies: Retrieval-Augmented Generation9Runtime Strategies: Advanced Reasoning Models10Review Quiz11The Importance of Human-in-the-Loop12Selecting the Right Techniques13Conclusion14\n\n----------------------------------------"
  },
  {
    "pageId": "ADVANCED_GENAI_TOPICS\\learning-module\\1-introduction.tsx",
    "text": "What is GenAI?\n\n----------------------------------------\n\nBefore we explore the advanced Generative AI (GenAI) techniques, let's briefly revisit what sets GenAI apart from non-GenAI techniques. Unlike traditional AI systems that analyze and interpret existing data, GenAI creates—or generates—new content. It's the technology behind chatbots that engage in human-like conversations, algorithms that generate realistic images from text descriptions, and systems that can write code or compose music. Popular GenAI large language models (LLMs are GenAI tools that work with text) include OpenAI's ChatGPT, Anthropic's Claude, Google's Gemini, X's Grok, and Meta's Llama models. Popular GenAI image generators include OpenAI's DALL-E, Stability AI's Stable Diffusion, Midjourney, and Google's Imagen. There are other GenAI programs for generating videos, music, etc.\n\nGenAI models are trained on vast datasets, allowing them to understand and mimic patterns in the training dataset content. This unique capability enables GenAI to:\n\n 1. Produce human-like text across various styles and formats.\n 2. Generate creative content, from art to music.\n 3. Assist in complex problem-solving by offering novel solutions.\n 4. Enhance productivity by automating content creation tasks.\n\nGenAI is changing report writing, data analysis, and predictive modeling. It's not just about automation; it's also about augmenting human capabilities with AI-driven insights and creativity. For instance, in tax planning, GenAI systems can now analyze a company's financial data, current tax laws, and proposed legislative changes to generate potential tax strategies. These AI-driven strategies can include multiple scenarios, each with detailed explanations of potential tax implications, risk assessments, and suggestions for optimizing tax positions. This allows tax professionals to more quickly evaluate complex tax situations and provide more strategic advice to clients, enhancing both efficiency and the quality of tax planning services.\n\nAs a second example, Amazon announced in a quarterly earnings announcement they were able to save $260 million in costs and 4,500 years of developer time by using GenAI to help reprogram apps programmed in an older coding language to a new coding language. The GenAI model was trained to understand computer code and then could automatically update old code.\n\nAs we explore advanced GenAI techniques, keep in mind that we're building upon this foundation, pushing the boundaries of what's possible in AI-assisted decision-making and analysis.\n\n----------------------------------------"
  },
  {
    "pageId": "ADVANCED_GENAI_TOPICS\\learning-module\\11-human-in-the-loop.tsx",
    "text": "The Importance of Human-in-the-Loop\n\n----------------------------------------\n\nWhile we’ve explored various advanced techniques to enhance GenAI performance and reduce hallucinations, it’s important to remember that these techniques cannot guarantee 100% accuracy. The most effective safeguard against hallucinations is human oversight. The concept of “human-in-the-loop” is the most important safeguard to ensure the responsible and effective use of GenAI.\n\nWhat is human-in-the-loop? Human-in-the-loop refers to the practice of keeping human judgment and decision-making as an integral part of AI systems. In this approach, AI assists and augments human capabilities rather than replacing them entirely. Humans provide oversight, make final decisions, and intervene when necessary. At its most basic level, human-in-the-loop means that a human reviews all content produced in full or in part by AI and takes final responsibility for the output.\n\nThis process involves several key aspects. Humans play a crucial role in validation, verifying the accuracy and appropriateness of AI-generated outputs. They also provide contextual understanding, offering nuanced interpretation of results and considering factors that may not be captured in the AI’s training data. Ethical oversight is another important function, where human judgment ensures AI outputs align with ethical standards and professional responsibilities. An AI may have a technically correct answer that is not ethical. The human can intervene to make sure decisions are ethical. Lastly, the human-in-the-loop approach facilitates continuous improvement, as feedback from human experts helps refine and improve AI models over time.\n\nTo implement human-in-the-loop, consider the following steps:\n\n 1. Define Clear Roles: Establish when and how human intervention should occur in AI-assisted processes.\n\n 2. Training: Ensure staff are trained to effectively oversee and interpret AI outputs.\n\n 3. Feedback Loops: Create mechanisms for human experts to provide feedback on AI performance.\n\n 4. Documentation: Maintain clear records of human decisions and interventions in AI-assisted processes.\n\nRemember that while GenAI technologies offer powerful capabilities, they are tools to augment human expertise. To date, most GenAI technologies cannot fully replace human judgment; therefore, humans should be involved with GenAI in producing final outputs.\n\n----------------------------------------"
  },
  {
    "pageId": "ADVANCED_GENAI_TOPICS\\learning-module\\12-techniques.tsx",
    "text": "Selecting the Right Techniques\n\n----------------------------------------\n\nChoosing AI techniques requires careful consideration of several factors. Complex tasks might demand multi-agent systems, while data sensitivity concerns could push towards prompting methods that don’t share data. When real-time information is crucial, RAG and tool integration shine. Resources matter too. Time, money, training capabilities, and data availability all play a role in technique selection, as some AI approaches are more resource-intensive than others. It’s not always a single-technique solution, though. Often, a user’s specific needs are best met by blending multiple AI techniques. This combination can leverage the strengths of different approaches, creating a more tailored and effective solution. The key is to assess the unique requirements and constraints of each situation. By doing so, one can select the AI technique—or combination of techniques—that best aligns with the task at hand and available resources. In the end, the goal is to find the most suitable approach for each unique application of AI.\n\nWe prepared the following graphic to help you think through which technique is most appropriate for a given situation.\n\n\n\n----------------------------------------"
  },
  {
    "pageId": "ADVANCED_GENAI_TOPICS\\learning-module\\13-conclusion.tsx",
    "text": "Conclusion\n\n----------------------------------------\n\nEach of the following GenAI topics discussed in this course are set to transform the industry, allowing business professionals to spend less of their time performing routine tasks, and more time making critical decisions.\n\n * Fine-Tuning\n\n * Multi-Agent Systems\n\n * Tool Integration\n\n * Prompting\n\n * Retrieval-Augmented Generation (RAG)\n\n * Reasoning Models\n\nUnderstanding these techniques and their capabilities helps professionals optimize AI models for their organization’s specific needs. The most successful professionals will be those who leverage AI capabilities while applying critical thinking, ethical considerations, and domain-specific knowledge in solving complex challenges. As AI continues to advance, staying informed about the latest techniques and trends is vital to remain competitive in the field.\n\nAfter completing this training, you should have achieved the following learning objectives and gained a better understanding of specific GenAI techniques you can utilize to optimize your GenAI use.\n\nLearning Objectives\n\n 1. Define advanced GenAI techniques (such as fine-tuning, multi-agent systems, tool integration, prompting, and Retrieval-Augmented Generation) and identify their applications in accounting and finance.\n\n 2. Evaluate the benefits, limitations, and ethical implications of implementing GenAI techniques in financial contexts, including considerations of data privacy, and transparency.\n\n 3. Apply appropriate GenAI techniques to address specific accounting and financial challenges, demonstrating the ability to select and implement suitable methods for different scenarios.\n\nKey Terms\n\n * Anthropic: An AI research company that developed the Claude model.\n\n * API: A set of protocols and tools for building software applications, allowing different systems to communicate.\n\n * Artificial Intelligence (AI): The simulation of human intelligence in machines programmed to think and learn like humans.\n\n * Chain-of-thought prompting: A technique where an AI model is asked to explain its reasoning step-by-step.\n\n * ChatGPT: A large language model developed by OpenAI, capable of generating human-like text based on prompts.\n\n * Claude: An AI large language model developed by Anthropic, designed for various tasks including analysis and conversation.\n\n * Few-shot learning: A machine learning approach where a model can make accurate predictions based on only a few examples.\n\n * Fine-tuning: The process of further training a pre-trained AI model on a specific dataset to improve its performance on particular tasks.\n\n * Generative AI (GenAI): AI systems capable of creating new content, such as text, images, or code.\n\n * Gemini: An AI model developed by Google.\n\n * Grok: An AI model developed by X (formerly Twitter).\n\n * Hallucinations: Incorrect or nonsensical outputs produced by AI models, often due to gaps in training data or misinterpretation of prompts.\n\n * Human-in-the-loop: A process where human oversight is maintained in AI systems, ensuring that human judgment is applied in making final decisions or reviewing AI-generated content.\n\n * Large Language Models (LLMs): AI models trained on vast amounts of text data, capable of understanding and generating human-like text.\n\n * Llama: A large language model developed by Meta (formerly Facebook).\n\n * Multi-agent systems: AI systems composed of multiple interacting intelligent agents working together to solve complex problems.\n\n * Prompting (Prompt engineering): AI models designed to logically process information and make decisions, often used to ensure consistency in complex multi-agent systems.\n\n * Reasoning Models: AI models designed to logically process information and make decisions, often used to ensure consistency in complex multi-agent systems.\n\n * Retrieval-Augmented Generation (RAG): A technique that combines information retrieval with text generation to produce more accurate and informed AI responses\n\n * Training Dataset: A collection of data used to train an AI model, allowing it to learn patterns and associations necessary for generating responses.\n\n * Tool integration: The process of enabling AI models to interact with and utilize external tools, databases, or APIs.\n\n----------------------------------------"
  },
  {
    "pageId": "ADVANCED_GENAI_TOPICS\\learning-module\\2-model-development.tsx",
    "text": "GenAI Model Development\n\n----------------------------------------\n\nGenAI uses a model to generate text, images, videos, or music based on learned patterns from training data. The following material gives a brief overview of the entire process of creating a GenAI model. After this overview, we will spend additional time discussing the model in more detail.\n\nHow a Generative AI Model is Created and Used\n\n----------------------------------------\n\n1. Data Collection\n\nThe first step is gathering a large and diverse set of examples. For a text generator, this could be books and articles. For an image generator, it might be millions of pictures. The quality and variety of this data are crucial because they determine what the AI can learn and create.\n\n\n\nAll GenAI models go through this process before they are given to users to use. Once finished, the user can then use the model for many different applications. It is important to note that these models do not always produce the same output, even when given the exact same prompt. The strength, and weakness, of GenAI models is that they can generate different answers. The models can even generate errors or nonsensical outputs called “hallucinations.” The following are a list of different ways that GenAI may hallucinate.\n\n 1. Incorrect Arithmetic\n    \n    User: \"What is 15 + 28?\"\n    \n    AI: \"15 + 28 equals 50.\"\n\n 2. Nonexistent Historical Events\n    \n    User: \"Who won the 1975 space race?\"\n    \n    AI: \"In 1975, the United States and the Soviet Union held a joint competition to see who could colonize Mars first. The U.S. won the race that year.\"\n\n 3. Inventing a Scientific Theory\n    \n    User: \"What is quantum teleportation\"\n    \n    AI: \"Quantum teleportation is a method by which a physical object can be instantly moved across space using telekinetic powers harnessed by human thought.\"\n\n 4. Fictional Famous Quotes\n    \n    User: \"What did Albert Einstein say about time travel?\"\n    \n    AI: \"Einstein famously said, 'Time travel is like walking backward through a mirror of light.'\"\n\n 5. Inventing Fictional Geographic Features\n    \n    User: \"What is the tallest mountain if Africa?\"\n    \n    AI: \"The tallest mountain if Africa is Mount Zanzibar, standing at 7,500 meters above sea level.\"\n\nThese are particularly egregious examples of hallucinations. Typically, hallucinations are more subtle and the user needs to take great care to review work to make sure details are technically accurate, math is performed correctly, and quotes or papers really were said or produced by the claimed author.\n\nHallucinations are particularly likely when a user gives complex instructions in long or unclear prompts. GenAI developers are developing methods to reduce output errors, like hallucinations. The table below shows some of those techniques. We cover these techniques in more details in the rest of this training. The techniques are separated into pre-training, post-training, deployment, and runtime techniques. Take a minute to carefully review the entire table.\n\n\n\n----------------------------------------"
  },
  {
    "pageId": "ADVANCED_GENAI_TOPICS\\learning-module\\3-training-techniques.tsx",
    "text": "Pre-Training and Post-Training Techniques\n\n----------------------------------------\n\n\n\n----------------------------------------"
  },
  {
    "pageId": "ADVANCED_GENAI_TOPICS\\learning-module\\4-tool-integration.tsx",
    "text": "Deployment Strategies: Tool Integration\n\n----------------------------------------\n\nDeployment strategies are used after the model is created and before the end-user uses the model. We will focus on language models specifically (i.e., models used to produce text outputs). Deployment strategies can enhance a model’s abilities and compensate for weaknesses in large language models.\n\nTool integration is a deployment strategy that enables AI models to interact with external tools, databases, and APIs allowing AI to access real-time information and perform actions beyond its initial training. A simple tool integration is the use of a calculator. Language models do not perform math like a calculator, but instead try to predict the next word of a written statement. As such, they often get math problems wrong. With tool integration, the AI can read a prompt and then realize that there is a math problem. Once it realizes that it needs to answer a math problem, the AI can use a tool, in this case a calculator, to perform the task. The AI will call the tool and send inputs to the tool. The tool will perform its functions and send the result back to the AI. The AI will then finalize the output. In this way, the AI is less likely to hallucinate because the correct tool performs its function.\n\nTool integration significantly enhances accounting workflows by allowing a GenAI model to access real-time data directly from accounting software like QuickBooks. For instance, when prompted to “Generate a financial summary for this month,” the AI taps into the accounting software’s API to pull up-to-date information such as bank transactions, accounts payable, and other key financial metrics. This direct connection means the generated report reflects the latest business activity, ensuring the information is accurate and eliminating the need for manual data entry. The process is streamlined, efficient, and minimizes the chances of outdated or incomplete data being used.\n\nBeyond simple data retrieval, the AI can leverage other integrated tools to add more depth to its reporting. For instance, a document reader can be used to access and verify details from invoices and receipts, ensuring expense records match the scanned documentation. When generating a summary, the AI can cross-check these invoice values against the company’s financial records, adding a layer of accuracy and validation that goes beyond basic database queries. By integrating such specialized tools, the model minimizes the risk of hallucinations—errors or misstatements made when relying purely on predictive output—and instead delivers consistent, data-backed financial reports. This makes GenAI not only more reliable but also far more useful in practical, real-world accounting tasks.\n\nDespite these advantages, significant risks and security concerns are introduced with giving AI the ability to use tools. Allowing AI to interact with external systems—such as databases, APIs, or document readers—raises questions around data privacy, unauthorized access, and potential misuse of sensitive information. There is a risk that the AI, if not properly restricted, could access or expose confidential financial data, either due to a vulnerability in the integration or due to misconfiguration. Additionally, security flaws could be exploited by malicious actors, leading to data breaches or manipulation. Ensuring strict access controls, regular audits, and encrypted data transmission are therefore crucial to mitigate these risks. Proper safeguards, such as limiting the scope of data the AI can access and closely monitoring interactions, are essential to balance the benefits of tool integration with the need for maintaining robust security and privacy standards.\n\n----------------------------------------"
  },
  {
    "pageId": "ADVANCED_GENAI_TOPICS\\learning-module\\5-prompting.tsx",
    "text": "Runtime Strategies: Prompting\n\n----------------------------------------\n\nPrompting, or prompt engineering, is a runtime strategy where users guide the AI model's output by providing specific instructions and context. Effective prompting can significantly enhance the model's performance without requiring technical changes to the model itself.\n\nConsider an internal auditor using GenAI to assist with an audit of the company's procurement process. A basic prompt might be: \"Analyze our procurement process for weaknesses.\" However, this broad request could lead to hallucinations or missed important details. Let's explore how to improve this prompt to minimize hallucinations:\n\n * Be specific and clear: Provide detailed instructions and context to guide the model.\n   \n   Improved prompt: \"Analyze the procurement process for XYZ Manufacturing Company, focusing on potential control weaknesses in vendor selection, purchase order approval, and invoice payment steps.\"\n   \n   \n\n * Use constraints: Specify limitations or boundaries for the AI's response.\n   \n   Improved prompt: \"Analyze the procurement process for XYZ Manufacturing Company. Identify the top 3 most significant control weaknesses, if any, and explain their potential impact on financial reporting and operational efficiency.\"\n   \n   \n\n * Request step-by-step reasoning (called chain-of-thought prompting): Ask the model to explain its thought process.\n   \n   Improved prompt: \"Analyze the procurement process for XYZ Manufacturing Company. For each potential control weakness identified, explain your reasoning step-by-step, referencing specific parts of the process flow and internal control framework.\"\n   \n   \n\n * Implement fact-checking prompts: Encourage the model to verify information.\n   \n   Improved prompt: \"Analyze the procurement process for XYZ Manufacturing Company. For each potential control weakness, cross-reference with COSO Internal Control Framework guidelines. If you're unsure about any information, explicitly state that it requires verification.\"\n   \n   \n\n * Use few-shot learning: Provide examples of correct responses in the prompt.\n   \n   Improved prompt: \"Analyze the procurement process for XYZ Manufacturing Company for control weaknesses. Here's an example of the analysis format I'm looking for:\n   \n   * Weakness: Lack of segregation of duties in purchase order approval\n   * Evidence: Same individual creates and approves purchase orders\n   * Risk: Potential for unauthorized purchases or fraud\n   Please provide your analysis in a similar format.\"\n   \n   \n   \n   \n\nDespite these techniques, prompting has limitations in preventing hallucinations. The model may still misinterpret complex prompts, show overconfidence in incorrect responses, or lack real-time factual information. Small changes in prompts can also lead to significantly different outputs. Also, sometimes individuals try to get the GenAI to stop hallucinating by saying something like, \"don't hallucinate\" or \"don't' make up facts.\" This is not an effective strategy to reduce hallucinations.\n\nBecause of these weaknesses, most prompting still requires human-in-the-loop to review and carefully scrutinize output. It's crucial to stress that the human user will ultimately take responsibility for what is produced and should therefore be careful and diligent in reviewing material.\n\nA cautionary example of the risks of not properly reviewing AI-generated content comes from a recent legal case. In 2023, two lawyers submitted a legal brief to a federal court that contained citations to non-existent cases generated by ChatGPT. The lawyers failed to verify the AI's output, assuming its responses were accurate. This led to severe consequences, including a $5,000 fine and a disciplinary hearing. The judge in the case emphasized that AI could be used to assist in drafting legal documents, but it was the lawyer's responsibility to ensure the accuracy of any filed materials.\n\nThis example demonstrates the importance of human oversight in using GenAI, especially in professional fields like accounting and law where accuracy and integrity are critical. While AI can be a powerful tool for enhancing productivity and insight, it should be viewed as an assistant when prompting rather than a replacement for professional judgment and due diligence.\n\n----------------------------------------"
  },
  {
    "pageId": "ADVANCED_GENAI_TOPICS\\learning-module\\6-multi-agent-systems.tsx",
    "text": "Deployment Strategies: Multi-Agent Systems\n\n----------------------------------------\n\nUnderstanding Agents and Multi-Agent Systems\n\nAn agent in AI is a software entity designed to autonomously perform specific tasks, perceiving its environment, making decisions, and taking actions to achieve its goals. In a multi-agent system (MAS), agents are more than just prompts—they operate independently, each with unique capabilities, roles, and objectives, often working collaboratively to achieve complex goals through dynamic interaction with their environment.\n\nUnlike a static prompt-response model, agents adapt to changes, communicate, and fulfill distinct roles, accessing specialized tools or data sources. This allows them to share information, learn from experiences, and respond dynamically, making them far more effective and adaptable than simple prompts.\n\nScenario: Generate a comprehensive financial report for Q2, including ROI analysis, cash flow projections, and compliance checks with GAAP standards and company policies.\n\n\n\nThe primary advantage of multi-agent systems is their ability to tackle complex tasks by dividing them into smaller parts, with each agent specialized to perform its task. Despite this advantage, multi-agent GenAI systems come with challenges. The primary risks include increased complexity in managing multiple specialized agents, which can lead to coordination overhead and slower processing times. There’s also a heightened risk of conflicting outputs, where different agents may produce inconsistent or contradictory results. This can make debugging and maintaining consistency across the system more difficult. Additionally, multi-agent systems often require more computational resources, potentially increasing costs. Perhaps most critically, the complex interactions between agents can lead to unexpected behaviors that are hard to predict or control, posing challenges for system reliability and trustworthiness.\n\n----------------------------------------"
  },
  {
    "pageId": "ADVANCED_GENAI_TOPICS\\learning-module\\8-rag.tsx",
    "text": "Runtime Strategies: Retrieval-Augmented Generation\n\n----------------------------------------\n\nRetrieval-Augmented Generation, or RAG, represents another technique to reduce hallucinations and it also offers the benefit of providing answers based on real-time information. Unlike traditional GenAI systems that are constrained to answering only with pre-trained data, RAG-enabled models can access and incorporate current information from a database and incorporate it in its responses.\n\nWhen a financial professional or auditor submits a query, the RAG process initiates a sophisticated information retrieval mechanism:\n\n 1. Query Processing: The system analyzes the input, identifying key concepts and requirements.\n 2. Information Retrieval: Utilizing advanced vector-based search techniques, the model scans designated knowledge bases.\n 3. Contextual Synthesis: The AI then synthesizes its foundational training in accounting principles with the newly acquired relevant data.\n 4. Response Generation: Finally, the model produces a response that integrates its core knowledge with the most current and relevant external information.\n\nThe following widget demonstrates a simplified version of how this process works.\n\nStep 1: Query Selection\n\nSelect a predefined accounting query to start the RAG process. This simulates a user input in a real RAG system.\n\nSelect a queryWhat are assets?Explain liabilitiesDefine revenueWhat's the accounting equation?\n\nThe incorporation of a database with current information allows RAG models to offer several benefits:\n\n 1. Up-to-date Information: Non-RAG GenAI models are limited to material used in their training models. RAG models can incorporate any current information that is included in the database.\n 2. Continuous Learning: While the base model remains stable, the retrieval component allows for continuous updates without full retraining, ensuring relevance.\n 3. Improved Accuracy: The ability to cross-reference multiple sources enhances the precision of RAG model responses.\n 4. Contextual Relevance: Responses are tailored to the information contained in the database. This can often achieve more relevant responses.\n 5. Enhanced Decision Support: By combining historical financial data with current market trends, RAG models can offer more insightful financial analysis and forecasting.\n 6. Improved Referencing: RAG models can be designed so they provide references to the database material. This provides more traceability to the underlying information that supports the GenAI model response.\n\nRAG models have gained significant traction in business settings due to their ability to combine knowledge bases with contextual understanding. Here are several examples of how organizations have implemented RAG models to enhance their operations:\n\n 1. Internal Control Documentation Querying: A company uploads all their internal control documentation into a RAG system. This allows users to quickly query the extensive documentation and receive precise answers about specific control procedures, compliance requirements, or risk assessments. This implementation significantly reduces the time spent searching through lengthy documents and ensures that all employees have access to the most up-to-date internal control information.\n 2. Academic Research Translation: Organizations use RAG models to process current academic research in finance and accounting, converting complex scholarly articles into more understandable, practice-oriented summaries. By constraining the RAG to only include verified academic sources, the system reduces the risk of hallucinations or misinformation, while making cutting-edge research accessible to practitioners who may not have the time or background to digest academic papers in their original form.\n 3. Regulatory Compliance Assistant: A large multinational corporation implements a RAG model to navigate the complex landscape of international accounting standards and regulations. The system is fed with constantly updated regulatory documents from various jurisdictions. When accounting teams face compliance questions, they can query the RAG model to get accurate, up-to-date information on how to handle specific transactions or disclosures in different countries, ensuring global compliance.\n 4. Audit Evidence Analyzer: Audit firms use RAG models to process and analyze vast amounts of client data during audits. The system is trained on auditing standards, previous audit reports, and industry-specific financial data. Auditors can query the system to assess risk areas or find relevant precedents from similar audits. This implementation speeds up the audit process and helps auditors focus on areas that require professional judgment.\n 5. Financial Report Generator: Companies implement RAG models to assist in drafting financial reports and disclosures. The system is fed with the company’s financial data, relevant accounting standards, and examples of high-quality financial reports from peer companies. Financial reporting teams can then use the RAG model to generate initial drafts of reports, suggest appropriate disclosures, or explain complex accounting treatments in plain language. This not only accelerates the reporting process but also helps ensure consistency and completeness in financial disclosures.\n 6. Tax Law Interpreter: Accounting firms and corporate tax departments utilize RAG models to interpret complex tax laws and regulations. The system is continuously updated with tax codes, court rulings, and IRS guidance. Tax professionals can query the system with specific scenarios or transactions, receiving detailed explanations of the tax implications along with references to relevant laws and precedents. This implementation helps tax professionals navigate tax law more efficiently and accurately.\n\nWhile Retrieval-Augmented Generation (RAG) models offer significant advantages, they are not without limitations. One of the primary challenges is their heavy dependence on data quality. RAG models can only be as accurate and reliable as the information they retrieve, which means that outdated, inaccurate, or biased data in the knowledge base can lead to flawed outputs.\n\nAnother limitation is the potential for contextual misinterpretation. RAG models may sometimes misunderstand the nuances of a query, resulting in the retrieval of irrelevant or incorrect information. This can be especially critical in accounting, where precise interpretation of standards and regulations is important. Moreover, while RAG models excel at retrieving and synthesizing information, they lack the true understanding and professional judgment that human experts possess. This limitation becomes apparent when dealing with complex, nuanced financial situations that require more than just data retrieval and combination.\n\nThere’s also a risk of overreliance on these models. As RAG systems become more sophisticated, there’s a danger that accounting professionals might become overly dependent on them, potentially neglecting to develop or maintain critical thinking skills and professional skepticism that are essential in the field. This overreliance could lead to a gradual erosion of expertise among professionals over time.\n\nFrom a practical standpoint, integrating RAG models into existing accounting systems and workflows presents its own set of challenges. Implementation often requires significant changes to IT infrastructure and established processes, which can be both costly and time-consuming. This integration challenge can be particularly daunting for smaller accounting firms or finance departments with limited resources.\n\nLastly, RAG models may also struggle with ambiguity, which is common in accounting and finance. Many scenarios in these fields have multiple valid interpretations or approaches, and RAG models might provide overly simplistic answers to complex questions that require nuanced understanding. Additionally, while RAG models can access updated information, their core doesn’t learn from interactions in the way humans do. This means that recurring errors or misinterpretations may persist unless manually corrected in the knowledge base or the model is retrained.\n\nWhile not perfect, RAG models usually improve base models by offering up-to-date information and reducing hallucinations. By understanding and leveraging RAG technology, accounting professionals can enhance their capabilities, improve decision-making processes, and stay at the forefront of technological advancements in the field.\n\n----------------------------------------"
  },
  {
    "pageId": "ADVANCED_GENAI_TOPICS\\learning-module\\9-advanced-reasoning-models.tsx",
    "text": "Runtime Strategies: Advanced Reasoning Models\n\n----------------------------------------\n\n\n\n----------------------------------------"
  },
  {
    "pageId": "GENAI_GOVERNANCE\\learning-module\\1-introduction.tsx",
    "text": "Introduction to Generative AI\n\n----------------------------------------\n\nIntroduction to Generative AI Generative artificial intelligence, or GenAI for short, involves AI systems that can generate new content—such as text, images, music, or video—based on the data they are trained on. You are likely familiar with GenAI models like OpenAI’s ChatGPT, Microsoft’s Copilot, or Google’s Gemini models. By leveraging advanced machine learning techniques and neural networks, these models can identify patterns and structures within existing datasets, enabling it to produce results that mimic human creativity. Common business applications include:\n\n 1. Text Generation: Automating customer support responses to common inquiries, which helps improve efficiency and ensures consistent communication.\n\n 2. Image Creation: Designing marketing visuals or promotional material automatically, reducing the cost and time involved in hiring graphic designers.\n\n 3. Music Generation: Creating background music for commercials or corporate videos, saving on costs for licensing or custom music production.\n\n 4. Data Analysis and Augmentation: Enhancing customer segmentation by generating insights from diverse datasets, helping marketing teams to better target specific demographics.\n\nGenAI has powerful capabilities, but it also introduces risks for both individuals and organizations. At an individual employee level, there is a risk of over-reliance on GenAI for routine decision-making, which could lead to skill degradation. For instance, an employee might defer entirely to GenAI for financial report drafting without verifying the accuracy, resulting in potential errors being overlooked. If the employee continuously defers to GenAI for this and similar tasks, they may eventually lose the ability to complete the task without AI assistance. At a company-wide level, governance challenges arise in ensuring that GenAI systems are compliant with data privacy regulations across different jurisdictions. For example, if GenAI processes customer financial data without adequate encryption or adherence to GDPR, it could lead to significant regulatory penalties.\n\nThis training covers the most common risks identified by professionals that GenAI introduces and then discusses a GenAI Governance Framework and Maturity Model, which provides controls to help reduce risk and helps companies be more successful at using GenAI. While the training introduces a specific framework, the principles of this framework generalize to other frameworks and governance over GenAI.\n\n----------------------------------------"
  },
  {
    "pageId": "GENAI_GOVERNANCE\\learning-module\\11-challenge-2.tsx",
    "text": "Challenge 2 - Apply the GenAI Governance Framework to address real-world situations in accounting practices.\n\n----------------------------------------\n\nWelcome, consultant! Your mission is to guide TechnoVista Solutions through the complex world of GenAI governance. As you progress, the scenarios will become more challenging. Choose wisely! If at any point you make the wrong choice, you will have to start over!\n\nScenario 1: The Strategic Start\n\nTechnoVista’s CEO is excited about the potential of GenAI and wants to implement it across all departments immediately. However, you’re concerned about the lack of alignment between this initiative and the company’s overall strategy. The GenAI Governance Framework emphasizes the importance of strategic alignment in the “Strategic Alignment and Control Environment” domain. You need to decide how to proceed in a way that sets a strong foundation for TechnoVista’s AI journey.\n\nCreate a strategic GenAI roadmap with cross-functional buy-in\nStart implementing GenAI and then add controls as problems arise\nSubmit\n\n----------------------------------------"
  },
  {
    "pageId": "GENAI_GOVERNANCE\\learning-module\\14-conclusion.tsx",
    "text": "Conclusion\n\n----------------------------------------\n\nCongratulations on completing the GenAI Risks and Governance escape room training! Throughout this interactive experience, you've navigated complex scenarios that tested your understanding of Generative AI implementation, risk assessment, and governance best practices. You've applied the GenAI Governance Framework to real-world situations, evaluated maturity levels, and developed actionable governance strategies. To solidify your knowledge, please review the learning objectives outlined at the beginning of the training. Once you feel confident in your grasp of these key concepts, proceed to take the final graded quiz to demonstrate your mastery of the material.\n\nLearning Objectives\n 1. Identify key risks associated with GenAI in business contexts and recognize appropriate governance strategies.\n 2. Apply the GenAI Governance Framework to address real-world situations in accounting practices.\n 3. Evaluate the maturity level of GenAI implementation in accounting contexts using the provided maturity model.\n 4. Distinguish between key components of a basic GenAI governance action plan for an accounting environment.\n\nKey Terms\n\n * Data and Compliance Management: One of the five domains in the GenAI Governance Framework, focusing on managing data and ensuring regulatory compliance.\n\n * Emerging: The second level in the GenAI Governance Maturity Model, indicating growing implementation but not yet fully established.\n\n * Established: The third level in the GenAI Governance Maturity Model, indicating a well-developed implementation of GenAI governance.\n\n * GenAI Governance Framework: A comprehensive framework outlining key procedures across five domains of AI management, spanning operational, technological, human, ethical, and social considerations.\n\n * Generative Artificial Intelligence (GenAI): AI systems that can generate new content—such as text, images, music, or video—based on the data they are trained on.\n\n * Human, Ethical, and Social Considerations: One of the five domains in the GenAI Governance Framework, addressing the impact of GenAI on people and society.\n\n * Human-in-the-Loop: A policy requiring human oversight in AI-driven processes, especially for critical decisions.\n\n * Leading: The highest level in the GenAI Governance Maturity Model, indicating advanced and comprehensive implementation of GenAI governance.\n\n * Maturity Model: A tool used to evaluate an organization’s current AI governance capabilities and guide their journey towards improved maturity.\n\n * Nascent: The lowest level in the GenAI Governance Maturity Model, indicating initial or basic implementation.\n\n * Operational and Technology Management: One of the five domains in the GenAI Governance Framework, dealing with the management of GenAI systems and associated technologies.\n\n * Strategic Alignment and Control Environment: One of the five domains in the GenAI Governance Framework, focusing on aligning GenAI initiatives with organizational objectives.\n\n * Transparency, Accountability, and Continuous Improvement: One of the five domains in the GenAI Governance Framework, emphasizing the need for clear processes and ongoing enhancement of GenAI systems.\n\n----------------------------------------"
  },
  {
    "pageId": "GENAI_GOVERNANCE\\learning-module\\2-framework.tsx",
    "text": "Governance Framework\n\n----------------------------------------\n\nFor this training, we will focus on the GenAI governance framework that is freely available at GenAI Global. This framework was developed through the collective expertise of more than 1,000 practitioners and academics. Contributors included AI specialists, internal and external auditors, regulators, audit committee members, C-suite executives, and other experts across multiple domains. The aim was to identify the key risks of GenAI and then to create a robust governance model that serves a wide range of organizations, including for-profit, not-for-profit, and governmental sectors.\n\nGenAI technology is often encountered in a variety of ways. Employees may directly use tools like OpenAI's ChatGPT or Google's Gemini, or they might unknowingly interact with GenAI through integrated features within software like Microsoft's Copilot that is integrated into Microsoft Word and other programs. Organizations may also develop proprietary GenAI systems, such as a custom “CompanyGPT.” In each of these scenarios, this framework provides the necessary tools to identify, assess, and mitigate GenAI-related risks, ensuring a balance between innovation and responsible use.\n\nThe framework is structured to offer practical guidance for aligning GenAI initiatives with organizational objectives, managing associated data and compliance risks, and fostering transparency and accountability. The framework is particularly valuable because of its adaptability and how it relates to risk. As stated by Waseem Samaan, head of internal audit for Boomi,\n\n\"This AI governance framework…[provides] a one-page summary ideal for boardroom discussions, alongside a detailed breakdown of controls for practical implementation. It's designed not only to be adopted but also to be adapted, allowing companies to assess their compliance and maturity, identifying areas of strength and opportunities for improvement.\"\n\nThe following image provides an overview of the framework. Carefully read the description of each of the five domains covered in the framework.\n\n\n\nThe framework is designed to mitigate the key risks that GenAI introduces to an organization. Now that you have been introduced to the general framework, we will discuss the key risks and then return to how the framework helps mitigate these risks.\n\n----------------------------------------"
  },
  {
    "pageId": "GENAI_GOVERNANCE\\learning-module\\3-risks.tsx",
    "text": "Key GenAI Risks\n\n----------------------------------------\n\nAs part of developing this framework, the authors interviewed and surveyed numerous professionals and academics about the most important risks that GenAI introduces to organizations. They categorized these risks into 16 categories. We show you the 16 categories, but reading over this list can be a bit overwhelming…and boring. To make this content sink in, review the stories presented in the widget related to each risk. While each story is hypothetical, they are representative of the challenges that are occurring in real organizations.\n\nRisk Categories\n\n 1.  Enhanced Operational and IT Security Risks\n\n 2.  Strategic and Planning Risks\n\n 3.  Data-Related Risks\n\n 4.  Technology Evaluation and Selection Risks\n\n 5.  Transparency and Trust Issues\n\n 6.  Ethical and Bias Risks\n\n 7.  Process Management Risks\n\n 8.  Control Environment Risks\n\n 9.  Environment, Social, and Governance (ESG) Risks\n\n 10. Knowledge and Training Risks\n\n 11. Traceability Risks\n\n 12. HR and Employment Risks\n\n 13. Psychological and Social Risks\n\n 14. Legal and Regulatory Regime Risks\n\n 15. High Conceptual or Hypothetical Risk\n\n 16. Miscellaneous Risks\n\nEnhanced Operational and IT Security Risks\nThe Hacked AI\nStory:\n\nSarah, a data scientist at TechCorp, was excited about their new AI-powered customer service chatbot. One morning, she noticed the chatbot giving bizarre responses. Upon investigation, she discovered that hackers had infiltrated the system, potentially accessing sensitive customer data.\n\nRisk Explanation:\n\nThis story illustrates the vulnerability of AI systems to cyber attacks. Maintaining data confidentiality and securing AI systems against threats is crucial. If compromised, these systems can lead to data breaches and reputational damage.\n\nPreviousNext\n12345678910111213141516\n\nThe framework maps each of these risks to the 5 domains, which we will cover subsequently.\n\n----------------------------------------"
  },
  {
    "pageId": "GENAI_GOVERNANCE\\learning-module\\5-domains.tsx",
    "text": "Mapping Risks to Domains\n\n----------------------------------------\n\nEach of the 16 risks maps to one of the 5 domains included in the governance framework. In this way, the user of the framework can either trace specific risks to domains where they can focus to see improvement, or focus on improving a domain, knowing that they will therefore effectively manage the relevant risks. Review the following graphic to see how domains and risks map together.\n\n\n\nThe framework extends beyond mapping to provide the key control considerations for each domain to address each risk. In total, there are 69 different control considerations that help manage the risks. These control considerations are the key part of understanding how to manage risks. As one example, consider the domain of Operational and Technology Management, and the category of process management risks. The framework provides the following control considerations related to this risk:\n\n\n\nNotice that for each risk there are possible control considerations. It is important to note that controls should be “considered” meaning that not all controls are relevant to every organization. This framework has been applied to small school districts and multi-billion-dollar public companies. The person applying the framework should use their judgment to only apply controls that are relevant to their specific organization. For instance, the above control about validation and testing protocol will be very important to a large organization that employs multiple different apps that use GenAI, especially if the GenAI is used to process sensitive data. In contrast, an organization that only uses a single app related to GenAI, will likely implement less stringent controls in this area.\n\nIn the next section, we describe how the framework can help mitigate risks.\n\n----------------------------------------"
  },
  {
    "pageId": "GENAI_GOVERNANCE\\learning-module\\6-mitigate-risks.tsx",
    "text": "How the Framework Helps Mitigate Risks\n\n----------------------------------------\n\n\n\n----------------------------------------"
  },
  {
    "pageId": "GENAI_GOVERNANCE\\learning-module\\7-mitigate-risks-two.tsx",
    "text": "How the Maturity Model Helps Mitigate Risks\n\n----------------------------------------\n\nThe GenAI Governance Maturity Model is a complementary tool to the governance framework that helps organizations evaluate their current AI governance capabilities and guide their journey towards improved maturity. It provides a structured way for organizations to assess where they stand in terms of governance across various domains, such as strategy alignment, data management, risk assessment, and compliance. By evaluating maturity, organizations can understand their strengths, identify areas for improvement, and develop actionable plans to enhance their AI governance.\n\nThe maturity model categorizes an organization's AI governance capabilities into different levels, ranging from nascent to leading. Each level represents a distinct stage in the development of AI governance practices, with specific criteria that need to be met to advance to the next level. For example, an organization with a nascent control level may have basic policies and minimal oversight, while an organization with a leading control level has fully integrated AI governance into all business processes, with robust monitoring and accountability mechanisms.\n\nAs an example, consider the domain of \"Human, ethical, and social considerations\" One important control consideration is that the company implement \"human-in-the-middle\" policies for sensitive disclosures. The framework describes that this means, \"For disclosures that are deemed important or sensitive, require that all AI-generated content be reviewed by a human or humans before being released.\" The framework helps assess where the company is currently performing in this regard on the following scale:\n\n\n\nOnce a company assesses where they sit on the maturity scale regarding the “human-in-the-middle” control, they may decide that they have this risk adequately covered and need no further action, or they may determine that additional steps are necessary. If they identify gaps, they should develop a targeted action plan to address these shortcomings. This may involve prioritizing initiatives such as investing in specific employee training programs focused on understanding and implementing human-in-the-loop processes, updating existing policies to mandate human oversight for sensitive AI-generated content, and assigning dedicated staff to review these outputs.\n\nBy using the maturity model, organizations can systematically determine which areas require more attention. It also helps set clear benchmarks for progress, enabling organizations to track their improvements over time. The maturity model is particularly valuable for aligning AI governance with business strategy, ensuring that AI initiatives not only manage risk but also contribute to achieving long-term organizational goals.\n\n----------------------------------------"
  },
  {
    "pageId": "GENAI_GOVERNANCE\\learning-module\\8-mitigate-risks-3.tsx",
    "text": "Who should Drive the Maturity Model Evaluation?\n\n----------------------------------------\n\n\n\n----------------------------------------"
  },
  {
    "pageId": "GENAI_GOVERNANCE\\learning-module\\9-applying-the-framework.tsx",
    "text": "Applying the GenAI Framework\n\n----------------------------------------\n\nTo help you internalize the benefits of a framework, we now present you with a simulated consulting experience. You are being tested by TechnoVista Solutions, a cutting-edge tech company that has recently implemented several GenAI systems across its operations, to see if they will hire you to perform consulting work for the company. The company's leadership is concerned about potential risks and wants to ensure their GenAI governance is up to industry standards.\n\nYour mission is to first prove you have what it takes to work for TechnoVista and then guide TechnoVista through a series of critical challenges, applying your expertise in the GenAI Governance Framework and Maturity Model. This consulting engagement will test your ability to:\n\n 1. Identify and explain key GenAI risks in a business context\n\n 2. Apply the framework to real-world scenarios\n\n 3. Evaluate the maturity of GenAI implementation using the provided model\n\n 4. Develop actionable governance strategies\n\nWhile this engagement mimics a fun escape room, it's designed to deepen your understanding of GenAI risks, controls, and governance principles. Your recommendations will shape TechnoVista's approach to responsible AI use.\n\nTo prepare for your consultation, ensure you have the GenAI Governance Framework and Maturity Model readily available. You should carefully review both before you begin. These will be valuable references to use as you navigate the challenges ahead.\n\nAre you ready to showcase your expertise and help TechnoVista Solutions secure its future in the world of GenAI? Let's see if you can get hired to help TechnoVista Solutions!\n\n----------------------------------------"
  },
  {
    "pageId": "GENAI_GOVERNANCE\\learning-module\\interactive-widget.tsx",
    "text": "Enhanced Operational and IT Security Risks\nThe Hacked AI\nStory:\n\nSarah, a data scientist at TechCorp, was excited about their new AI-powered customer service chatbot. One morning, she noticed the chatbot giving bizarre responses. Upon investigation, she discovered that hackers had infiltrated the system, potentially accessing sensitive customer data.\n\nRisk Explanation:\n\nThis story illustrates the vulnerability of AI systems to cyber attacks. Maintaining data confidentiality and securing AI systems against threats is crucial. If compromised, these systems can lead to data breaches and reputational damage.\n\nPreviousNext\n12345678910111213141516"
  },
  {
    "pageId": "INTRO_TO_GENAI\\learning-module\\1-ai-history.tsx",
    "text": "AI History\n\n----------------------------------------\n\nArtificial Intelligence (AI) refers to the creation of technologies that can mimic human cognitive functions such as reasoning and learning. The origins of AI trace back to the 1950s, specifically to the 1956 Dartmouth Conference, where the term “artificial intelligence” was officially introduced. This pivotal conference brought together scientists eager to build machines that could emulate human thought, leading to the development of the first AI programs. Since that time, there have been ups and downs in the development of AI.\n\nThe following video will give you a brief history of AI's growth and transformation from its inception to the 2000s. Just for fun, the video script, actors, and voices are created using AI. The company Synthesia allows for creating AI videos using AI avatars. There's the first application of how AI is changing business. Creating videos, with real looking and sounding avatars is now very easy to do.\n\n\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_GENAI\\learning-module\\10-emerging-trends.tsx",
    "text": "Emerging Trends\n\n----------------------------------------\n\nRapid advancements in AI are continuously broadening the scope and potential of these systems. Enhancements in deep learning techniques and hardware acceleration are driving the development of more sophisticated and robust AI models. As a result, AI is becoming faster, more accurate, and more efficient. Some research indicates that Generative AI's capabilities are doubling roughly every eight months. To see this evolution in action, check out this brief video clip illustrating the progress in AI video generation from 2023 to 2024.\n\n\n\nThis video can be seen at https://www.youtube.com/watch?v=kxuIJAgTepQ\n\nAI is rapidly advancing in virtually every conceivable domain, unlocking new avenues for creativity and innovation. For example, AI-generated music isn't just creating novel compositions but also enriching existing ones with added complexity and depth. Likewise, AI-generated videos are becoming more lifelike, allowing filmmakers and content creators to produce stunning visual effects and animations much more quickly. This progress is revolutionizing creative fields.\n\nThe swift advancement of AI is also reshaping the workplace. Automation driven by AI is optimizing workflows and boosting productivity across various industries. For instance, Amazon reported they saved $260 million and 4,500 years of developer time by using AI to help take old software and modernize it.\n\nThe ultimate impact of AI on employment remains uncertain. While some jobs may disappear, new opportunities will arise, and many existing roles will evolve. This shifting job market highlights the need for AI education and training to equip individuals for the future. As AI becomes more integrated into daily life, it is expected to boost efficiency, foster innovation, and enhance the overall quality of life, though this transition may present challenges as we adjust to the complexities of these technological advancements.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_GENAI\\learning-module\\11-implications.tsx",
    "text": "Implications for Accounting Professionals\n\n----------------------------------------\n\nAs AI becomes increasingly widespread, accounting professionals must develop new competencies, including a solid understanding of AI. Accountants will need to master AI tools to either augment their existing tasks or take over functions previously performed by humans. Since adopting new technologies can be challenging, accountants should dedicate time to familiarize themselves with these systems. Given the fast-paced nature of AI advancements, a commitment to ongoing learning and adaptation is essential. Staying updated on the latest AI innovations and best practices will be crucial for accountants to maintain their edge in the industry.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_GENAI\\learning-module\\12-considerations.tsx",
    "text": "Practical Considerations\n\n----------------------------------------\n\nImplementing generative AI in accounting firms will be a process. Here are some considerations managers should consider related to the implementation process.\n\nAssess Needs: Begin by evaluating where AI can be most beneficial. For instance, pinpoint which accounting tasks are ripe for automation and could benefit from AI-enhanced analytics.\n\nSelect Suitable AI Solutions: Scrutinize various AI tools and vendors based on their functionality, dependability, and industry standing. AI solutions vary widely, so it's essential to test different options to find the best fit for your organization.\n\nEducate Staff and Integrate AI: Offer thorough training to help employees get acquainted with AI technologies and their advantages. Seamlessly incorporate AI into current workflows to facilitate a smoother transition for the team.\n\nEvaluate AI Performance: Continuously monitor the effectiveness of AI systems and make necessary adjustments to improve their efficiency. It's common to refine AI tool choices over time, especially during the initial phases of implementation.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_GENAI\\learning-module\\13-conclusion.tsx",
    "text": "Conclusion\n\n----------------------------------------\n\nIn this training, you’ve learned about the history of AI, what generative AI is, and the benefits and challenges to using AI. Below are the learning objectives once more. Please reflect on them and make sure you can answer each one before moving on to the graded quiz.\n\nLearning Objectives\n\n 1. Recognize the basic concepts of generative AI, including its benefits and drawbacks in accounting contexts.\n\n 2. Differentiate generative AI from other types of AI.\n\n 3. Identify practical examples of generative AI in accounting and evaluate their potential effects on the field.\n\n 4. Identify emerging trends in AI and distinguish between actionable strategies for integrating AI into accounting practices.\n\nKey Terms\n\n * AI Governance: The framework of policies and practices to ensure responsible and ethical use of AI within an organization. The training dedicates a section to this topic, discussing its importance and mentioning a specific framework.\n\n * AI Winter: Periods of reduced funding and interest in AI research due to unmet expectations and limitations in early AI systems.\n\n * Algorithm: A process or set of rules followed by a computer in problem-solving operations.\n\n * Artificial Intelligence (AI): The simulation of human intelligence processes by machines, especially computer systems.\n\n * Bias: Prejudices in data that can lead to unfair outcomes in AI systems.\n\n * Black Box: AI models, especially deep learning ones, that operate in ways that are difficult to understand or explain.\n\n * Deep Learning: A subset of ML involving neural networks with many layers, enabling the analysis of large amounts of data and the extraction of complex patterns.\n\n * Deepfakes: AI-generated false content such as videos or images that appear authentic.\n\n * Expert Systems: AI systems that mimic human decision-making using rule-based logic.\n\n * Fine-Tuning: The process of further training a pre-trained AI model on a smaller, more specific dataset to specialize or improve performance in certain areas.\n\n * Generative Artificial Intelligence (GenAI): AI technology that generates new content such as text, images, or music, rather than simply analyzing existing data.\n\n * Hallucinations: Instances where AI systems produce outputs that are not grounded in the input data or reality.\n\n * Human-in-the-loop: An approach that keeps humans involved in the AI process, particularly for oversight and validation of AI outputs. This concept is mentioned in the training as “human-in-the-middle” when discussing solutions to AI challenges.\n\n * Large Language Models: Advanced NLP models that can understand and generate human-like text based on vast amounts of data.\n\n * Machine Learning (ML): A subset of AI involving the use of algorithms and statistical models to enable computers to improve their performance on a task with experience.\n\n * Multimodal AI: AI models capable of processing and generating multiple types of data, such as text, images, and audio. This term is mentioned when discussing emerging trends in AI.\n\n * Natural Language Processing (NLP): The branch of AI focused on the interaction between computers and humans through natural language.\n\n * Neural Networks: Computing systems inspired by the biological neural networks of animal brains, crucial for deep learning.\n\n * Prompt: The instructions or words typed into an AI model to generate a certain response.\n\n * Prompt Engineering: The practice of crafting precise and detailed prompts to enhance the effectiveness of AI models. This is discussed in the section on dealing with AI challenges.\n\n * Regulatory Compliance: Ensuring that AI systems adhere to evolving accounting standards and regulations.\n\n * Temperature: A parameter in AI models that controls the level of randomness in the generated responses, balancing between predictable and creative outputs. This is explained in detail in the section about how GPT models function.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_GENAI\\learning-module\\2-terms.tsx",
    "text": "Terms and Analogy\n\n----------------------------------------\n\nWe will now discuss important terms related to AI. To help you learn these terms, we have created an analogy using sports coaching, which you will read below.\n\nArtificial Intelligence (AI): The replication of human intelligence by machines and computers. This is a broad, umbrella term encompassing many of the subsequent terms.\n\nMachine Learning (ML): A branch of artificial intelligence that enables computer systems to learn and improve from experience without being explicitly programmed. ML algorithms analyze large datasets to identify patterns and make decisions with minimal human intervention. As these systems encounter more data, they refine their models, becoming increasingly accurate in tasks such as classification, prediction, and problem-solving. Machine Learning powers a wide range of applications, from recommendation systems in streaming services to fraud detection in financial transactions, and forms the foundation for more advanced AI techniques like deep learning.\n\nDeep Learning: An advanced form of machine learning that uses layered neural networks to process and learn from vast amounts of data. These networks, inspired by the human brain, can automatically discover and extract important features from raw data. As the system processes more information through its multiple layers, it becomes increasingly adept at recognizing complex patterns, enabling it to perform tasks like image and speech recognition with remarkable accuracy. Deep learning powers many of today's AI breakthroughs, from virtual assistants to self-driving cars.\n\nGenerative AI (GenAI): A cutting-edge branch of artificial intelligence that focuses on creating new, original content rather than simply analyzing or categorizing existing data. These AI systems use advanced machine learning techniques, particularly deep learning and neural networks, to understand patterns in vast amounts of training data and then generate novel outputs that mimic those patterns. Generative AI can produce a wide range of content types, including text, images, music, and even video.\n\nNeural Networks: A computational model inspired by the structure and function of the human brain. These systems consist of interconnected nodes (artificial neurons) organized in layers, which process and transmit information. Each connection between nodes has a weight that adjusts as the network learns, allowing it to recognize patterns and make decisions. Neural networks can learn to perform tasks by analyzing large sets of examples, gradually improving their accuracy through a process called training.\n\nNatural Language Processing (NLP): A branch of artificial intelligence that focuses on the interaction between computers and human language. NLP combines computational linguistics, machine learning, and deep learning techniques to enable computers to understand, interpret, and generate human language in both text and speech forms. These systems analyze language structure, context, and patterns to derive meaning, allowing them to perform tasks such as translation, sentiment analysis, and question-answering.\n\nLarge Language Models (LLMs): Advanced artificial intelligence systems that represent the cutting edge of Natural Language Processing (NLP). These models are built using massive neural networks trained on enormous datasets of text from diverse sources. By analyzing patterns in this vast amount of language data, LLMs can understand context, generate human-like text, and perform a wide range of language-related tasks with remarkable accuracy. They use deep learning techniques to process and predict sequences of words, allowing them to engage in conversations, answer questions, summarize texts, and even generate creative content. ChatGPT, Claude, Copilot, and Gemini are all examples of LLMs.\n\n----------------------------------------\n\nTo help you understand the vocabulary of AI technology, consider this sports coaching analogy:\n\nArtificial Intelligence (AI): AI is like a state-of-the-art sports training facility designed to enhance athletic performance by simulating and improving human coaching abilities. This facility has several specialized components.\n\nMachine Learning (ML): ML is like a coach who not only analyzes past performances but also continuously adjusts training methods based on real-time feedback during practice sessions. This coach refines techniques through trial and error, learning from both successes and failures to optimize the athlete's performance over time.\n\nDeep Learning: Deep learning is like an elite coach with an uncanny ability to process and interpret vast amounts of unstructured information - from game footage to biometric data. This coach excels at identifying intricate patterns that might be invisible to others, leading to breakthroughs in performance and strategy.\n\nNeural Networks: Neural networks represent the coach's brain structure, where each neuron (node) is like a specialized coach focusing on a specific aspect of training. These 'mini-coaches' are interconnected, sharing information and collectively making decisions, much like how different regions of the brain work together to process complex information.\n\nNatural Language Processing (NLP): NLP is like having a multilingual, context-aware communication expert in the facility. This expert not only understands multiple languages but also grasps nuances, idioms, and even non-verbal cues, ensuring clear communication between coaches and athletes from diverse backgrounds.\n\nGenerative AI (GenAI): GenAI is like having a creative director and content producer on the coaching staff. This innovative team member can generate new training videos, create personalized motivational speeches, design custom workout plans, and even produce realistic simulations of potential game scenarios. GenAI can also adapt existing training materials to suit different learning styles or create entirely new coaching resources on demand, enhancing the facility's ability to cater to each athlete's unique needs and preferences.\n\nLarge Language Models (LLMs): LLMs are like having access to an infinitely knowledgeable and creative sports consultant. This consultant not only has encyclopedic knowledge of all sports and training methods but can also generate entirely new training plans, strategies, and even predict future trends in sports science, all tailored to the specific needs of each athlete.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_GENAI\\learning-module\\3-gpt.tsx",
    "text": "What does GPT Mean?\n\n----------------------------------------\n\nGenerative pre-trained transformer (GPT) models, like ChatGPT, are a particular type of GenAI, widely discussed in the popular press. See the graphic below, which explains what each part of GPT means.\n\n\n\nThis architecture allows GPT models to consider the context of each word, enabling them to generate coherent, relevant text (or other outputs). They excel in tasks like translation, summarization, question-answering, and content creation, making them versatile tools.\n\nHow do GPTs function behind the scenes? They process an enormous array of data, which can include text, images, and videos, often amounting to millions or even billions of data entries for text-based models. This information is used to create a vast numerical matrix that represents the relationships between different concepts. For instance, if the term “bark” is used, the model learns to differentiate between the sound a dog makes and the outer layer of a tree based on how these terms appear in various contexts. By analyzing these patterns, the model learns the nuances of language, allowing it to generate relevant and contextually accurate text. So, if a sentence starts with “The bark was loud,” the model understands it's referring to the sound a dog makes and not the tree's outer layer.\n\nThis model's performance can be enhanced through a process called “fine-tuning,” which involves refining a pre-trained model by training it on a smaller, more targeted dataset. This helps the model specialize in particular tasks or improve accuracy in specific areas. During fine-tuning, the numerical values in the model's matrix are adjusted, altering how it makes predictions. For instance, a company might license a model like ChatGPT-4, then fine-tune it with their proprietary data to make its responses more precise and relevant to their unique requirements.\n\nAlternatively, instead of fine-tuning, companies might simply tweak the prompts they use. Prompts are the inputs or questions given to the model to elicit desired responses. Unlike fine-tuning, changing a prompt does not modify the internal numbers in the model's matrix but rather influences how the model interprets and responds to the input based on the existing configuration.\n\nBefore committing to fine-tuning, organizations should carefully weigh its potential advantages against the costs involved. Fine-tuning can be expensive and doesn't always yield significantly better results. Companies should assess whether their specific use case, the quality and scale of their data, and the anticipated performance enhancements justify the investment. In many cases, simply adjusting the prompts used with a pre-trained model can effectively meet their needs, making full-scale fine-tuning unnecessary.\n\nIn practice, people often talk about “training a model” and are often not clear what they mean. A technical definition of training a model is creating the original model or doing the fine tuning that adjusts the numbers that are part of the model weights. However, when people talk about training they often mean they will adjust the prompt get a different output. You should use care to use the language of training and editing a prompt appropriately.\n\nLet's show how the LLM works using a classic joke, “Why don't scientists trust atoms?” When this prompt is input into an LLM, it processes the information through a complex network of numerical representations that capture relationships between words and concepts. The model then generates a series of potential responses by predicting the most probable next words in sequence.\n\nDepending on the model's configuration, it might produce responses such as:\n\n * \"Because they make everything up.\" or\n\n * \"Because they're always in an unstable state.\"\n\nThese outputs demonstrate the model's capacity to generate contextually appropriate and witty responses based on the input. The model recognizes that this is a joke and gives a response. However, the model in some instances may not recognize this as a joke and respond with something like:\n\n\"Scientists do trust atoms because they are well-understood in the context of modern physics and chemistry. Atoms are the fundamental units of matter, composed of protons, neutrons, and electrons, and their behavior is predictable based on established theories such as quantum mechanics and atomic theory. These models have been extensively tested through experiments and observations, confirming that atoms are reliable building blocks for understanding the physical world.\"\n\nIn this situation, the model interpreted the prompt as a literal questions and responded accordingly. How a model interprets a prompt is part random and part based on what else is included in the prompt of the conversation before the prompt is given.\n\nIt is again worth emphasizing that the model doesn't always produce identical responses due to inherent variability in its generation process. This variability is influenced by a parameter known as “temperature,” which can be adjusted to control the balance between predictability and creativity in the model's outputs.\n\nA lower temperature setting encourages the model to choose the most probable next word, resulting in more consistent but potentially less creative responses. Conversely, a higher temperature allows for more diverse word choices, leading to varied and sometimes unexpected outputs.\n\nFor example, given the same prompt about distrustful scientists and atoms, the model might generate an alternative response: \"Because they're too small to keep an ion.\"\n\nNotice how the model can interpret the prompt differently based on its probabilistic generation process or additional contextual information. While this variability enables engaging and dynamic interactions, it also means that the model may not consistently produce the same answer for repeated queries. This characteristic can be advantageous for creative applications but may pose challenges in scenarios where output consistency is crucial, like many accounting applications.\n\nIn essence, the interplay between the model's vast knowledge base and its controlled randomness allows for a range of responses that can be informative, humorous, or thought-provoking, depending on the specific prompt and parameter settings.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_GENAI\\learning-module\\4-benefits.tsx",
    "text": "Benefits\n\n----------------------------------------\n\nWith the growing use of generative AI in businesses, we are witnessing both its advantages and the drawbacks it presents. Let's start by exploring the benefits of implementing AI in accounting settings.\n\nEnhanced efficiency and precision. AI can take over routine tasks such as using GenAI to generate reports from notes, freeing up accountants to engage in more strategic roles like financial analysis and client advisory, thus boosting productivity and minimizing errors.\n\nCost reduction. Companies like JPMorgan Chase utilize neural networks for fraud detection, which helps them save millions on legal expenses. Similarly, Walmart uses AI-driven robots for inventory management, cutting down on manual labor costs. These cases highlight how automation can streamline processes, reduce errors, and deliver significant cost savings.\n\nBetter decision-making. CFOs can leverage AI and machine learning to sift through large volumes of financial data, uncovering patterns and identifying potential savings. AI also enables real-time monitoring of financial performance, assisting management in adapting to fluctuating economic conditions.\n\nWith these examples, notice how AI can refer to the various definitions you learned previously. Given the current interest in GenAI, often people refer to AI or GenAI and they actually mean a different area of AI like machine learning. Realize each type of AI has a different meaning and try to use the appropriate language to describe it.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_GENAI\\learning-module\\5-interactive-activities.tsx",
    "text": "Interactive Activities\n\n----------------------------------------\n\nIn the following activities, you will practice with a LLM to see how it can help you to be more efficient and effective. Open the LLM that for which you previously registered. When doing these examples, do not put in client information or other sensitive data. Now do the following.\n\n * You want to create a summary report to send to the client about how you are progressing on the task they hired you for (this is generic so you can choose if it is filing their taxes, performing a consulting engagement, or something else). Make a list of the key progress you have made and then ask the LLM to draft a concise project update summary based on those points. Experiment with how changing the language in your prompt can significantly change the output (if you want to see how drastic it can change the output, try writing “write the report as a pirate” in your prompt).\n\n * Go to sec.gov and download a 10-K from a company of your choice. Copy part of the 10-K, into the LLM and ask the LLM to summarize the information. LLMs excel at summarizing information from large amounts of text. You can also ask the LLM to summarize the information in more basic or complex ways to help you learn more.\n\nDid you perform both tasks?\n\nYesNo\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_GENAI\\learning-module\\6-challenges.tsx",
    "text": "Challenges\n\n----------------------------------------\n\nThe following video discusses a few of the challenges that come from using AI in accounting.\n\n\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_GENAI\\learning-module\\7-dealing-with-challenges.tsx",
    "text": "Dealing With Challenges\n\n----------------------------------------\n\nHere are some possible solutions to resolve the challenges previously discussed.\n\nHuman Oversight: It's important for users of AI to take an active role in ensuring the accuracy of AI outputs by thoroughly cross-checking and validating the information generated. This involves comparing AI outputs with factual data, confirming accuracy, and addressing any inconsistencies. By incorporating rigorous human review, organizations can reduce the risks associated with AI-generated errors. This approach, often referred to as “human-in-the-middle,” emphasizes the responsibility of a human operator to guarantee the quality and accuracy of AI outputs.\n\nPrompt Engineering: Crafting precise and detailed prompts can significantly enhance the effectiveness of AI models, guiding them to produce more accurate and relevant results. By providing specific instructions on how the AI should behave or what to focus on, users can reduce the likelihood of errors or irrelevant responses, helping to ensure that the outputs meet the intended objectives.\n\nEnsuring Transparency: Encouraging AI to explain its reasoning or how it reached a particular conclusion can help users understand the underlying processes and identify potential errors or hallucinations. This transparency is crucial for interpreting AI outputs effectively and involves asking the AI to outline its thought process or show how it derived its results, such as by prompting it with “explain your reasoning” or “demonstrate how you arrived at this answer.”\n\nRobust Data Training Protocols: Using comprehensive and well-structured data training protocols, alongside diverse and representative datasets, can help reduce biases in AI outputs, promoting fairness and inclusivity. For instance, training an AI model on a narrow set of images representing only one ethnicity would limit its ability to generate diverse outputs. Expanding the dataset to include a wider range of demographics ensures that the AI can produce more balanced and representative results.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_GENAI\\learning-module\\9-ai-governance.tsx",
    "text": "AI Governance\n\n----------------------------------------\n\nAI governance is crucial and should be a priority for all organizations. To effectively manage the risks and rewards of Generative AI, organizations need robust governance frameworks. Although various frameworks exist, a notable one is a free, widely accessible governance framework and maturity model developed by a group of academics and practitioners, based on insights from over 1,000 professionals and experts. This framework stands out for its adaptability across organizations of all sizes and its user-friendly design. You can access this free resource at genai.global.\n\nAs seen in the image below, the framework covers five key domains: Strategic Alignment and Control Environment, Data and Compliance Management, Operational and Technology Management, Human, Ethical, and Social Considerations, and Transparency, Accountability, and Continuous Improvement. Each domain addresses specific risks and offers control considerations to help organizations align GenAI initiatives with their goals, ensure compliance with legal standards, integrate GenAI into operations, manage ethical and social impacts, and maintain transparency and accountability in decision-making.\n\n\n\nThe website also features a free maturity model that helps organizations assess their AI governance practices. This tool outlines key control considerations and allows organizations to evaluate their performance in each area, helping them identify strengths and weaknesses and create a targeted improvement plan.\n\nWhether you use this framework, or another one, a GenAI governance framework is valuable because it offers a comprehensive and flexible guide for organizations navigating the evolving landscape of GenAI. As these technologies become increasingly integrated into business operations, a framework supports organizations in managing the unique risks they present. Frameworks encourage responsible and strategic use of GenAI by providing clear guidance on policy creation, risk management, stakeholder involvement, and ongoing enhancement of AI practices. By implementing a framework, organizations of all sizes can effectively leverage GenAI while addressing potential risks, driving innovation, and maintaining trust and compliance with regulatory standards.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL\\learning-module\\1-databases-and-querying.tsx",
    "text": "Databases and Querying\n\n----------------------------------------\n\nWatch the following video to learn about databases and querying. This knowledge will give you the foundation to understand SQL!\n\n\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL\\learning-module\\10-having-clause.tsx",
    "text": "HAVING clause\n\n----------------------------------------\n\nClick here to download the handout for this course, which contains the database tables and other useful material for writing SQL queries. Refer to Graphic 2 while completing this course's practice questions.\n\nThe HAVING clause is like the WHERE clause, with one key difference: The WHERE clause filters out rows before something is aggregated, while the HAVING clause filters out rows after they are aggregated. Consider the following two queries.\n\nWHERE Query\nHAVING Query\n\nThe WHERE query removes the records for all states other than Utah before the GROUP BY happens. Thus, it returns a single row and only averages rows for the state of Utah. In contrast, the HAVING query computes the average credit score for all states (during the GROUP BY clause) and then removes the state or states that do not meet the criteria — in this case, Utah is removed because its average credit score is not above 700.\n\nTips:\n\n * You will never have an aggregation function (e.g., SUM, AVG, COUNT) in a WHERE clause as the WHERE clause can only filter before aggregation (remember the order of operations!). The WHERE clause comes before the GROUP BY clause both in syntax and the order of execution.\n\n * You will always have an aggregation function (e.g., SUM, COUNT, MIN, MAX) in the HAVING clause because HAVING removes rows after the aggregation is performed. The HAVING clause comes after the GROUP BY clause both in syntax and in the order of execution.\n\nYou can have both WHERE clauses and HAVING clauses in the same query. Examine the following code and identify what the output will look like. Then, run the code to see if you are correct.\n\nWHERE and HAVING together\n\nNow that you’ve seen how useful the HAVING clause is, put your knowledge to the test through the following practice problems!\n\nPractice Problem 1\nPractice Problem 2\nPractice Problem 3\nPractice Problem 4\nAdditional Practice\n\nFor additional instruction and practice go to https://www.w3schools.com/sql/sql_having.asp. This is not required.\n\nThat’s it for the practice problems! Press “Next” to advance to the graded quiz. The “Next” button will only be enabled once all terminal queries on this page have been graded. Make sure you have submitted and received feedback for every query before proceeding.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL\\learning-module\\11-conclusion.tsx",
    "text": "Conclusion\n\n----------------------------------------\n\nLet’s revisit the order of execution with a bit more discussion now that you have studied each of the different commands and clauses.\n\n 1. FROM clause, including JOIN – SQL must first know the source of the data and how to combine it (more on joining will come in the next lesson).\n\n 2. WHERE clause – After getting the data, SQL filters out the rows that are not needed for the rest of the query.\n\n 3. GROUP BY clause – With the filtered dataset, SQL can now make any aggregations that need to take place (with the appropriate fields in the SELECT clause).\n\n 4. HAVING clause – With the data aggregated, SQL can perform another filter of rows based on the aggregated data.\n\n 5. SELECT clause – The dataset is finalized, and SQL now allows you to specify the columns you will display. While SELECT is presented first when writing SQL syntax, the actual clause is executed later after the final dataset is created.\n\n 6. ORDER BY clause – After the dataset is created, including headers, you specify the sort order of the final data.\n\nThe order of execution and other helpful concepts are summarized on the handout for this lesson, which you can find here.\n\nThe best way to learn SQL is to practice. Making sure you understand the basics covered in this lecture will help you more easily progress to more advanced queries.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL\\learning-module\\2-sql-commands.tsx",
    "text": "What are SQL clauses and commands?\n\n----------------------------------------\n\nA SQL clause is part of a statement that specifies a particular condition or operation within a database query. Clauses include instructions that query, or gather, the data you are looking for within a database. Some foundational clauses include:\n\n * SELECT\n * FROM\n * JOIN\n * WHERE\n * GROUP BY\n * HAVING\n * ORDER BY\n\nNote: This is the order in which the clauses are usually written, but differs from how they are executed, as we will explain later in the course.\n\nSQL commands consist of one or more clauses (typically written in all caps for clarity) and provide instructions to the database system on how to perform specific tasks, such as querying, modifying, or managing data. Commands like SELECT, INSERT, and UPDATE each have unique purposes, and their functionality is extended by clauses such as FROM, WHERE, GROUP BY, and HAVING. The graphic below illustrates the main functions of some of the more common commands and provides example code that completes each command with its respective clauses.\n\n\n\nTo understand how to properly write queries, we need to understand the requirements and limitations of the database software that will run our queries. A database management system (DBMS) is software that creates, manages, and interacts with databases to facilitate organized and efficient data storage, retrieval, and administration. Throughout this course, we will explain the best coding practices to work with DBMS engines.\n\nFor starters, SQL clauses are typically written in all caps, though DBMS engines do not require capitalization (for example, we use “SELECT” instead of “Select” or “select” in this course). It is a good practice to always use capitalization as it helps distinguish a SQL clause from table names and other data elements. Additionally, names and entities in tables typically use initial caps (e.g., FirstName), though many database engines ignore cases when referencing table and field names. While most SQL clauses work in all DBMS engines, each engine has differences from the core SQL language. We’ll note these differences as we go along.\n\nNow let’s talk about the order in which these SQL clauses are executed.\n\nOrder of execution\n\nSQL clauses are executed in a specific order, which is important to understand when writing effective and efficient queries. Here is a list of the order in which SQL clauses are executed when running a SELECT clause and a high-level description of what each clause does. We’ll talk more in depth about each of these later in this course or in later courses.\n\n 1. FROM (including JOIN): Identifies the source tables and establishes the dataset for subsequent operations by combining tables if necessary.\n 2. WHERE: Filters rows from the dataset based on specified conditions, reducing the initial data.\n 3. GROUP BY: Groups the filtered data into subsets based on specified columns, preparing it for aggregation.\n 4. HAVING: Filters aggregated data based on conditions applied to aggregate functions.\n 5. SELECT: Specifies the columns or expressions to be included in the final output.\n 6. DISTINCT: Removes duplicate rows from the selected data.\n 7. ORDER BY: Sorts the final result set based on specified columns and sorting directions.\n 8. LIMIT (or OFFSET): Restricts the number of rows returned (and optionally skips a specified number of rows).\n\nNote that the order of execution differs from the syntax order — the order in which the clauses are written in the query. For example, the SELECT clause is written first when writing SQL queries (as shown in the Basic SQL commands graphic) but is executed fifth. Overall, many queries only use a few of the execution steps above.\n\nIn this course, we will focus on the SELECT, FROM (partially), WHERE, GROUP BY, HAVING, and ORDER BY clauses. In the Skillabyte Introduction to SQL – Part 2 course, you will learn more about FROM (including JOINS) and the remaining clauses. Click “Next” to begin with the SELECT and FROM clauses.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL\\learning-module\\3-select-from-clauses.tsx",
    "text": "SELECT and FROM clauses\n\n----------------------------------------\n\nClick here to download the handout for this course, which contains the database tables and other useful material for writing SQL queries.\n\nThe SELECT clause and FROM clause work together to identify the data you want presented in the query results. The FROM clause requires you to specify the entity or entities from which you are getting the data. For now, we will work only with tables as our entities.\n\nThe following table will be our database throughout this course. This table tells us the field (column) names for each entity (like CustID on the left) and their data types (like double on the right). In this dataset, we can see that there are 10 unique fields from CustID through FirstPurchase, and each has one of three unique data types (double, varchar(255), and datetime).\n\nIn a relational database, fields (also known as columns) can have different data types. Common field types include, but are not limited to, string (text), integer, float (decimal), date/time, and boolean. Each field type is designed to handle specific kinds of data, ensuring that the data is stored efficiently and accurately. We’ll talk more about field types later. For now, know that varchar(255) is a type of string (text) field and double is a numeric field type.\n\nCustomer data types table\n\n----------------------------------------\n\n2 columns, 10 rows\n\nField NameData TypeCustIDintegerNamevarchar(255)Cityvarchar(255)Statevarchar(255)CreditScoredoubleCreditLimitdoubleContactPrefvarchar(255)OrdersPlaceddoubleTotalOrdereddoubleFirstPurchasedatetime\n\nTo teach the basics of SQL, we will use a very simple database. The database only has a single table, called the Customer table, and relatively few records in the table. The Customer table below shows all of the field names and rows of data that you will query in this course. In future courses, we will use larger databases that contain multiple tables and more data.\n\nCustomer table\n\n----------------------------------------\n\n10 columns, 20 rows\n\nCustIDNameCityStateCreditScoreCreditLimitContactPrefOrdersPlacedTotalOrderedFirstPurchase1021Steve KleinProvoUtah7408000email390009/14/20161022Akbar LuzzattoRenoNevada8256000phone42000011/23/20131023Amram HanniganSt. GeorgeUtah6501000textnull0null1024Regina NurmiTucsonArizona7508000text9450008/19/20201025Eziz FabianLas VegasNevada6707000email102000012/19/20201026Elvira HawkingLas VegasNevada7004000email73500012/20/20171027Naveen AllanSalt Lake CityUtah8109000email330009/19/20161028Maxi GarverPhoenixArizona79015000text25500006/1/20101029Else SanderPhoenixArizona7506000phone52500011/26/20131030Ronaldo MerinoSalt Lake CityUtah350nullemail31500010/19/2019\n\nPrevious12Next\n\nNow that we understand the structure of our dataset, let’s learn how to query data from the Customer table.\n\nStep 1: Specify the table\n\nStep 1: Specify the output\n\nStep 3: Query multiple columns\n\nStep 4: Select all columns\n\nCongratulations — you have run your first queries! Note how each query ends with a semicolon ; — this indicates that the query is finished. While not every DBMS requires a semicolon at the end of the query, it is good practice, and it helps you know when the statement ends. As such, in this course, we will end our queries with a semicolon.\n\nBrackets and reserved characters\n\n----------------------------------------\n\nIn all previous examples, there is only a single table, and all field names are unique. However, in more complicated queries with multiple tables, you need to specify which table each field originates from. You do this by first listing the table name, then the field name with a period between them. For example, we rewrite the \"Name\" field name as Customer.Name to specify that it comes from the Customer table.\n\nIn some DBMS, like Microsoft Access, field names containing spaces or other reserved characters must include brackets to identify the field name. For instance, you would write [Customer].[First Name] if the field name included a space between \"First\" and \"Name\". To avoid having to use brackets, it’s best to use short, descriptive field names without reserved characters. Below are some instances that would require brackets.\n\nReserved character table\n\n----------------------------------------\n\n2 columns, 6 rows\n\nReserved character typeExampleSpecial charactersDollar sign ($), at sign (@), hashtag (#)Numeric field names123Field, 2023SalesQuotes“MyTable”, “Employee's Data” Unicode charactersनाव, 名字, اسم, имяField names with dashesFirst-Name, Order-Detail, Join-DateField names with periodsOrder.Detail, Customer.Address\n\nThis course will not require you to use brackets but be mindful of their purpose in future SQL queries.\n\nAliases\n\n----------------------------------------\n\nAliasing a field with AS\n\nAliasing a field without AS\n\nAliasing a table\n\nNow let’s learn about some powerful operations you can perform in the SELECT clause.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL\\learning-module\\4-select-operations.tsx",
    "text": "SELECT clause operations\n\n----------------------------------------\n\nClick here to download the handout for this course, which contains the database tables and other useful material for writing SQL queries.\n\nThe SELECT clause can be used to do more than just identify the columns to output. Here are a few operations that can be used in the SELECT clause.\n\nOperatorDescriptionExample clauseResult\nMathematical operators like +, -, *, etc.\nExample: [FieldName] * [Constant]\n\nMultiplies a number by a single numeric field\n\nSELECT c.Name, (c.OrdersPlaced * 5) AS FutureOrders FROM Customer AS c;\n1. SELECT c.Name: Retrieves the Name column from the Customer table.\n2. (c.OrdersPlaced * 5) AS FutureOrders: Calculates a new value by multiplying the OrdersPlaced column by 5 for each row. Names the column as FutureOrders.\n3. FROM Customer AS c: Specifies that the data should be retrieved from the Customer table and assigns it the alias c.\n\n[Field1] / [Field2]\n\nCalculates the ratio between two numeric fields\n\nSELECT c.Name, c.TotalOrdered, c.OrdersPlaced, (c.TotalOrdered / c.OrdersPlaced) AS AvgOrder FROM Customer AS c;\n1. SELECT c.Name, c.TotalOrdered, c.OrdersPlaced: Retrieves the Name, TotalOrdered, and OrdersPlaced columns from the Customer table.\n2. (c.TotalOrdered / c.OrdersPlaced) AS AvgOrder: Calculates a new value by dividing the TotalOrdered column by the OrdersPlaced column for each row and names this column AvgOrder.\n3. FROM Customer AS c: Specifies that the data should be retrieved from the Customer table and assigns it the alias c.\n\nUCASE([FieldName])\n\nConverts a string field to all uppercase characters\n\nSELECT UCASE(c.Name) AS NameAllCaps FROM Customer AS c;\n1. SELECT UCASE(c.Name) AS NameAllCaps: Converts all characters in the Name column from the Customer table to uppercase and assigns the alias NameAllCaps to the resulting uppercase name.\n2. FROM Customer AS c: Specifies that the data should be retrieved from the Customer table and assigns it the alias c.\n\n[constant] AS [alias]\nNULL AS [alias]\n\nAdds constant values or NULL fields to results\n\nSELECT c.Name, c.State, \"USA\" AS Country, NULL AS Planet FROM Customer AS c;\n1. SELECT c.Name, c.State: Retrieves the Name and State columns from the Customer table.\n2. \"USA\" AS Country: Adds a new column named Country to the result set, with the constant value \"USA\" for every row.\n3. NULL AS Planet: Adds another new column named Planet to the result set, with the value NULL for every row.\n4. FROM Customer AS c: Specifies that the data should be retrieved from the Customer table and assigns it the alias c.\n\nLEFT([FieldName], n)\n\nExtracts the first specified number of characters (n) from a string field\nYou would enter an integer and not the letter “n”\nSELECT LEFT(c.Name, 4) AS First4Name FROM Customer AS c;\n1. SELECT LEFT(c.Name, 4) AS First4Name: Extracts the first 4 characters from the Name column in the Customer table and assigns the alias First4Name to the result.\n2. FROM Customer AS c: Specifies that the data should come from the Customer table and assigns it the alias c.\n\nRIGHT([FieldName], n)\n\nExtracts the last specified number of characters (n) from a string field\nYou would enter an integer and not the letter “n”\nSELECT RIGHT(c.Name, 4) AS Last4Name FROM Customer AS c;\n1. SELECT RIGHT(c.Name, 4) AS Last4Name: Extracts the last 4 characters from the Name column in the Customer table and assigns the alias Last4Name to the result.\n2. FROM Customer AS c: Specifies that the data should be retrieved from the Customer table and assigns it the alias c.\n\nYEAR([DateField])\n\nRetrieves the year component from a date field as a four-digit number\n\nSELECT c.Name, YEAR(c.FirstPurchase) AS FirstPYear FROM Customer AS c;\n1. SELECT c.Name: Retrieves the Name column from the Customer table.\n2. YEAR(c.FirstPurchase) AS FirstPYear: Extracts the year from the FirstPurchase column and assigns the alias FirstPYear to the extracted year.\n3. FROM Customer AS c: Specifies that the data should be retrieved from the Customer table and assigns it the alias c.\n\n[Field1] || [Field2]\n\nConcatenates two string fields with designated separator\n\nSELECT c.Name || \", \" || c.City AS NameAndCity FROM Customer AS c;\n1. SELECT c.Name || \", \" || c.City AS NameAndCity: Concatenates the Name column and the City column from the Customer table, with a comma and a space in between, and assigns the alias NameAndCity to the resulting concatenated string.\n2. FROM Customer AS c: Specifies that the data should be retrieved from the Customer table and assigns it the alias c.\n\nRun each of the queries below to see these operations in action! Pay attention to how the queries are written and what effect each query has on the output.\n\nMultiplication\n\nDivision\n\nUppercase\n\nCreating constants\n\nSelecting a subset of a string field (LEFT)\n\nSelecting a subset of a string field (RIGHT)\n\nExtracting the year from a date field\n\nConcatenating two string fields\n\nNow it's time to try forming your own queries using SELECT clause operations! Press \"Next\" to advance to the practice problems.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL\\learning-module\\5-practice-select-operations.tsx",
    "text": "Practice: SELECT clause operations\n\n----------------------------------------\n\nAs you complete the following practice problems, reference the previous material to help you construct the SQL queries. You should download the handout for this lesson, which includes the SELECT clause operations table from the previous page as well as the data type table for the Customer dataset. Refer to Graphic 2 while completing this course's practice questions.\n\nHow to use the practice question terminals\n\n----------------------------------------\n\nType your SQL code into the black text box. Press “Run” to run the query and see the output or error message. After running, press “Grade Query” to see if your query is correct and receive AI feedback. The correct answer and an explanation will appear after you have pressed “Grade Query” twice or submitted the correct code, whichever comes first. Note that there are often many ways to answer SQL questions, so your solution may look different than ours and still produce the correct output.\n\nPractice question 1\n\nPractice question 2\n\nPractice question 3 (challenge)\n\nAdditional practice\n\n----------------------------------------\n\nIf you would like additional practice on SELECT clauses (this is not required), you can visit https://www.w3schools.com/sql/sql_select.asp.\n\nThe “Next” button will only be enabled once all terminal queries on this page have been graded. Make sure you have submitted and received feedback for every query before proceeding.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL\\learning-module\\7-order-by-clause.tsx",
    "text": "ORDER BY clause\n\n----------------------------------------\n\nClick here to download the handout for this course, which contains the database tables and other useful material for writing SQL queries. Refer to Graphic 2 while completing this course’s practice questions.\n\nThe ORDER BY clause specifies how the data will be sorted in the resulting output. Results can be sorted by one or more fields in ascending or descending order. You can sort by number (including dates) or string fields. Without the ORDER BY clause, results are unsorted and will display in the order recorded in the database. The default sort order in the ORDER BY clause is ascending (ASC).\n\nASC query\nASC alternative query\nORDER BY multiple fields\nAlternative ORDER BY multiple fields\nHint for writing ORDER BY\n\n----------------------------------------\n\nFor practice problems and quizzes, your ORDER BY must match the field order and sort order as specified in the problem description. Make sure to read the problem carefully.\n\nPractice problem\n\n----------------------------------------\n\nCreate a list of all customers sorted by the date of their first purchase in ascending order and then in descending order by credit limit. Include the following column names: Name, FirstPurchase, and CreditLimit in that order.\n\nView Schema\n\nPractice ORDER BY\n\n\n\n\nRunClear\nCheck\nResultsFeedback\nNo results. Click the ‘Run’ button to execute your query.\nAdditional practice\n\n----------------------------------------\n\n\n\nYou can learn more and practice the ORDER BY clause at https://www.w3schools.com/sql/sql_orderby.asp.\n\n\n\nBefore we learn about the GROUP BY clause, let’s take a break to learn about a real-world application of SQL at a fictional company: Sunny Blendz. The “Next” button will only be enabled once all terminal queries on this page have been graded. Make sure you have submitted and received feedback for every query before proceeding.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL\\learning-module\\9-group-by-clause.tsx",
    "text": "GROUP BY clause\n\n----------------------------------------\n\nClick here to download the handout for this course, which contains the database tables and other useful material for writing SQL queries. Refer to Graphic 2 while completing this course’s practice questions.\n\nThus far, we have used SQL to return all values from a table or to reduce the number of rows by using a WHERE clause. Now, you will learn how SQL queries can create aggregations of the data. For example, you could sum up all sales in a database to compute gross revenues.\n\nTo aggregate data, you use the GROUP BY clause. Remember, in terms of syntax order, the GROUP BY clause comes after the SELECT, FROM, and WHERE clauses and before the HAVING clause, which we will discuss shortly. In terms of execution order, the GROUP BY clause is processed after the FROM and WHERE clauses, but before the HAVING and SELECT clauses. Refer to the handout to help you remember the correct order.\n\nThe GROUP BY clause is usually used with aggregate functions. You are likely familiar with the aggregation formulas of SUM, COUNT, MIN, MAX, etc. from Microsoft Excel. These aggregations are available in SQL as well.\n\nTo start off, let’s compare two similar, but slightly different, SQL statements.\n\nStates without grouping\nStates with grouping\n\nBoth of these queries create a list of states that customers are from. In the first query, the output will be all 20 rows of customer data listing the states of each customer. The second query groups all similar states, displaying only one row for each unique state.\n\nAVG() query\nAVG() query with multiple grouped fields\nMultiple aggregated fields\nTips for using GROUP BY\n\n----------------------------------------\n\nIMPORTANT: When using an aggregate function in the SELECT clause, every field (column) in the SELECT clause that does not have an aggregate function must appear in the GROUP BY clause. Otherwise, your query will either result in an error or return arbitrary values for the unaggregated fields.\n\nFor example:\n\nView Schema\n\nGROUP BY error\n\nSELECT c.State, c.City, AVG(c.TotalOrdered) as AvgTotalOrdered, COUNT(c.TotalOrdered) as NumofOrders\nFROM Customer AS c\nGROUP BY c.State;\n\n\nSELECT c.State, c.City, AVG(c.TotalOrdered) as AvgTotalOrdered, COUNT(c.TotalOrdered) as NumofOrders FROM Customer AS c GROUP BY c.State;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nWhile this query doesn’t throw an error, it returned the wrong results. Why? City is a column that does not have an aggregate function, nor does it appear in the GROUP BY clause – yet we have included it in our SELECT clause. The database cannot determine how to group the results without including all non-aggregated columns in the GROUP BY clause, so it includes arbitrary city values for each of the three states.\n\nInstead, it should look like:\n\nView Schema\n\nGROUP BY error - corrected\n\nSELECT c.State, c.City, AVG(c.TotalOrdered) AS AvgTotalOrdered, COUNT(c.TotalOrdered) AS NumOfOrders\nFROM Customer AS c\nGROUP BY c.State, c.City;\n\n\nSELECT c.State, c.City, AVG(c.TotalOrdered) AS AvgTotalOrdered, COUNT(c.TotalOrdered) AS NumOfOrders FROM Customer AS c GROUP BY c.State, c.City;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nIn this corrected query, both State and City are appropriately included in the GROUP BY clause, which allows the database to know how to group the results. When using GROUP BY, be sure to carefully read and understand the problem so you can choose the correct aggregate function. For example, if the problem asks for a COUNT, don’t mistakenly use AVG.\n\nUsing alias names in ORDER BY can get complicated. When sorting results with the ORDER BY clause after grouping with GROUP BY, you can use alias names as defined in the SELECT clause. This is because ORDER BY is processed after the SELECT clause, so the alias is already defined and can be referenced by the query.\n\nYou cannot use aliases in the GROUP BY clause because the GROUP BY clause is processed before the SELECT clause and, as such, the alias doesn’t exist when the GROUP BY clause is evaluated.\n\nConsider the previous correct example. To order by the average total ordered amount, the code would look like this:\n\nView Schema\n\nGROUP BY error - corrected and sorted\n\nSELECT c.State, c.City, AVG(c.TotalOrdered) as AvgTotalOrdered\nFROM Customer AS c\nGROUP BY c.State, c.City\nORDER BY AVG(c.TotalOrdered); \n\n\nSELECT c.State, c.City, AVG(c.TotalOrdered) as AvgTotalOrdered FROM Customer AS c GROUP BY c.State, c.City ORDER BY AVG(c.TotalOrdered);\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\nPractice\n\n----------------------------------------\n\nPractice problem 1\nPractice problem 2\nPractice problem 3\nPractice problem 4\nPractice problem 5\nAdditional Practice\n\n----------------------------------------\n\n\n\nYou can learn more and practice the GROUP BY clause at https://www.w3schools.com/sql/sql_groupby.asp.\n\n\n\nThe “Next” button will only be enabled once all terminal queries on this page have been graded. Make sure you have submitted and received feedback for every query before proceeding.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL_P2\\learning-module\\1-joins.tsx",
    "text": "JOINS with two tables\n\n----------------------------------------\n\nClick here to download the handout for this course, which contains the database tables and other useful material for writing SQL queries.\n\nThe dataset for this section\n\n----------------------------------------\n\nLet's introduce the dataset that we will be using for our simple JOIN queries. Let's take a moment to explore the tables and the entity relationship diagram (ERD) below to learn how the dataset is structured.\n\nDatabase Layout\n\n----------------------------------------\n\nERDDog TablePerson Table\n\n\nThis dataset has two tables: Dog and Person. The Dog table's OwnerID field corresponds to the Person table's PersonID field, as indicated by the connecting line in the ERD diagram.\n\nJoining two tables\n\n----------------------------------------\n\nRemember that in Introduction to SQL – Part 1, we introduced the FROM clause; however, in that assignment, we only pulled data from a single table. In this assignment, we will now expand on the FROM clause to discuss pulling data from multiple tables using variations of the JOIN clause. We will start by learning how to join two tables together.\n\nIn the FROM clause, you specify how tables will be joined. The most common JOINs you will use are an INNER JOIN, LEFT JOIN or RIGHT JOIN, FULL OUTER JOIN, and a CROSS JOIN (also called a cartesian join). The tabs below show examples of each of these JOINs and the basic SQL to make the JOINs.\n\nINNER JOIN\n\n----------------------------------------\n\nINNER JOIN only returns values where the JOIN criteria match in both Table A and Table B. This is the most common type of JOIN. The SQL for this type of JOIN looks like this:\n\nINNER JOIN Query\n\nSELECT *\nFROM Person\nINNER JOIN Dog ON Person.PersonID = Dog.OwnerID;\n\n\nSELECT * FROM Person INNER JOIN Dog ON Person.PersonID = Dog.OwnerID;\n\nNotice you must use the FROM statement, the joining operator, and the ON statement. The ON statement specifies the fields (often a primary to foreign key relation) that will connect the two tables.\n\nPress “Run” to see the output produced by the following INNER JOIN query:\n\nView Schema\n\nINNER JOIN Query\n\nSELECT *\nFROM Person\nINNER JOIN Dog ON Person.PersonID = Dog.OwnerID;\n\n\nSELECT * FROM Person INNER JOIN Dog ON Person.PersonID = Dog.OwnerID;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nNote that this query does not return a row for Lassie from the Dog table. This is because there isn’t an OwnerID in Lassie’s row, so you can’t match a PersonID from the Person table. The query also doesn’t include a row for George Jetson from the Person table because there isn’t a Dog with his PersonID in the Dog table. Additionally, Laura Ingalls appears in two rows of this query, because her PersonID matched an OwnerID twice in the Dog table for both Jack and Bandit.\n\nIn many Database Management Systems (DBMSs), INNER JOIN can also be expressed as just JOIN. You may choose either when completing this course's practice problems or quiz questions.\n\nLEFT JOIN\n\n----------------------------------------\n\nAnother popular join, LEFT JOIN, returns all rows from Table A and those rows from Table B that match the ON criteria. This type of JOIN is used to add attributes from Table B to the list of attributes in Table A. The LEFT refers to the table specified on the left of the JOIN word. The SQL for this type of JOIN looks like this:\n\nSimple LEFT JOIN Query\n\nSELECT <select_list>\nFROM TableA AS a\nLEFT JOIN TableB AS b ON a.field=b.field;\n\n\nSELECT <select_list> FROM TableA AS a LEFT JOIN TableB AS b ON a.field=b.field;\n\nRun the following LEFT JOIN query:\n\nView Schema\n\nLEFT JOIN Query\n\nSELECT *\nFROM Person p\nLEFT JOIN Dog d ON p.PersonID = d.OwnerID;\n\n\nSELECT * FROM Person p LEFT JOIN Dog d ON p.PersonID = d.OwnerID;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nNotice how this query returns all owners in the Person table – even George Jetson, who does not have any dogs in the Dog table. Also, note how Lassie was excluded from the results because she does not have an owner listed.\n\nRIGHT JOIN\n\n----------------------------------------\n\nRIGHT JOIN is the same as LEFT JOIN, the difference being that a RIGHT JOIN keeps all the rows from the table specified on the right of the JOIN word. The SQL for this type of JOIN looks like this:\n\nSimple RIGHT JOIN Query\n\nSELECT <select_list>\nFROM TableA AS a\nRIGHT JOIN TableB AS b ON a.field=b.field;\n\n\nSELECT <select_list> FROM TableA AS a RIGHT JOIN TableB AS b ON a.field=b.field;\n\nRun the following RIGHT JOIN query:\n\nView Schema\n\nRIGHT JOIN Query\n\nSELECT *\nFROM Person p\nRIGHT JOIN Dog d ON p.PersonID = d.OwnerID;\n\n\nSELECT * FROM Person p RIGHT JOIN Dog d ON p.PersonID = d.OwnerID;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nNotice how this query returns all dogs in the Dog table – even Lassie, who does not have an owner associated. Also, note how George Jetson was excluded from the results because the Dog table doesn’t have George listed as an owner for any of the dogs.\n\nA SQL statement using a LEFT JOIN can produce similar results to a RIGHT JOIN by simply switching the table order in the FROM statement. For example, let’s rewrite the query we just ran but with a LEFT JOIN instead:\n\nView Schema\n\nRIGHT JOIN to LEFT JOIN Query\n\nSELECT *\nFROM Dog d\nLEFT JOIN Person p ON d.OwnerID = p.PersonID;\n\n\nSELECT * FROM Dog d LEFT JOIN Person p ON d.OwnerID = p.PersonID;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nThe output is the same as before, except the column order is slightly different. Since LEFT JOIN and RIGHT JOIN are essentially interchangeable, LEFT JOIN is often preferred for consistency’s sake.\n\nCROSS JOIN\n\n----------------------------------------\n\nAnother type of JOIN is a CROSS JOIN or CARTESIAN JOIN that combines every possible record in Table 1 with every possible record in Table 2. In the image to the left, the output would be 9 records: Table 1 record 1 paired with Table 2 record 1, Table 1 record 1 paired with Table 2 record 2, etc. These types of JOINs produce a tremendous number of results. You can calculate how many results a CROSS JOIN will yield by multiplying the number of rows in Table 1 by the number of rows in Table 2.\n\nYou may want to use a CROSS JOIN for several reasons. For example, assume you manage t-shirt inventory and have a list of colors and a list of sizes. By using a CROSS JOIN, you can generate a list that shows every possible combination of color and size for your t-shirts.\n\nThe SQL to produce this type of JOIN is as follows:\n\nSimple CROSS JOIN Query\n\nSELECT <select_list>\nFROM TableA AS a\nRIGHT JOIN TableB AS b ON a.field=b.field;\n\n\nSELECT <select_list> FROM TableA AS a RIGHT JOIN TableB AS b ON a.field=b.field;\n\nCROSS JOINs are unique because they do not need an ON statement, as they are joining every record of one table with every record of the other. Run the following CROSS JOIN of the Dog and Person tables to see the output:\n\nView Schema\n\nCROSS JOIN Query\n\nSELECT *\nFROM Person, Dog;\n\n\nSELECT * FROM Person, Dog;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nThis query produces 42 rows of data representing 42 unique owner-dog combinations (6 owners * 7 dogs = 42 combinations).\n\nWhile CROSS JOINs may be useful at times, exercise caution in their use. CROSS JOINs can easily be mistaken for regular JOINs because they are performed by merely separating two or more tables with commas. Also, CROSS JOINs on massive datasets may take an excessive time to load or may crash the DBMS session altogether.\n\nSome may choose to use CROSS JOINs in the following manner (though we advise against it because it can be very resource intensive and slow):\n\nView Schema\n\nUnadvised CROSS JOIN Query\n\nSELECT *\nFROM Person, Dog\nWHERE Person.PersonID = Dog.OwnerID;\n\n\nSELECT * FROM Person, Dog WHERE Person.PersonID = Dog.OwnerID;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nLet's consider this query: What you see is a CROSS JOIN where all possible combinations of rows are created. Then, the WHERE clause removes all rows where Person.PersonID is not equal to Dog.OwnerID. In doing so, the query has accomplished the same task as an INNER JOIN! However, even though this query works, it takes significantly more computational resources and clutters the WHERE clause by relying on it to both finish the JOIN and perform other filtering operations. By keeping the WHERE clause free of JOIN operations, your SQL becomes more readable. Further, you are less likely to make critical querying errors.\n\nFULL OUTER JOIN\n\n----------------------------------------\n\nA FULL OUTER JOIN returns all rows from both Table A and Table B. For example, if we performed a FULL OUTER JOIN on the Dog and Owner tables, we would get the following output:\n\nOwner and Dog Table\n\n5 columns, 8 rows\n\nDogIDDogNameOwnerIDPersonIDPersonName10Jack22Laura Ingalls11Bandit22Laura Ingalls12Einstein33Emmit Brown13Fang44Rubeus Hagrid14Lassie15Snoopy66Charlie Brown16Toto55Dorothy Gale1George Jetson\n\nSimilar to LEFT JOIN and RIGHT JOINs, a FULL OUTER JOIN includes records from one table that do not correspond to records in the other table. Lassie is included despite having no owner and George Jetson is included despite having no dogs.\n\nMany DBMSs do not support this type of JOIN. For example, to perform this FULL OUTER JOIN in Microsoft Access using SQL, you would need to use a CROSS JOIN with criteria or a UNION of a LEFT JOIN and RIGHT JOIN. (We will discuss UNIONs later in this assignment). While performing FULL OUTER JOINs is beyond the scope of this assignment, be aware that they exist and can be useful in certain situations.\n\nJOIN types summary\n\n----------------------------------------\n\nHere is a summary graphic containing all the JOIN types that we have learned:\n\n\n\nClick “Next” to advance and practice some simple JOIN problems.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL_P2\\learning-module\\2-practice-joins.tsx",
    "text": "Practice - simple JOINs\n\n----------------------------------------\n\nClick here to download the handout for this course, which contains the database tables and other useful material for writing SQL queries.\n\nNow that we've learned about the different types of JOINs, let's apply our knowledge with some practice problems. This section uses the same database with the dogs and owners tables. Since it is good practice to reference the ERD and tables while you query, we have included these again:\n\nDatabase Layout\n\n----------------------------------------\n\nERDDog TablePerson Table\n\nHow to use the practice question terminals\n\nType your SQL code into the black text box. Press \"Run\" to run the query and see the output or error message. After running, press \"Submit\" to see if your query is correct and receive AI feedback (note that if you change your code between pressing \"Run\" and \"Submit\", your score and AI feedback will reflect the most recent code that you have ran, not written). The correct answer and an explanation will appear after you have pressed \"Submit\" twice or submitted the correct code, whichever comes first.\n\nPractice problem 1\n\nPractice problem 2\n\nPractice problem 3\n\nAdditional practice\n\nIf you would like additional practice (this is not required), the following pages discuss different JOINs and contain more examples:\n\n * https://www.w3schools.com/sql/sql_join.asp\n * https://www.w3schools.com/sql/sql_join_inner.asp\n * https://www.w3schools.com/sql/sql_join_left.asp\n * https://www.w3schools.com/sql/sql_join_right.asp\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL_P2\\learning-module\\3-multiple-joins.tsx",
    "text": "JOINs with more than two tables\n\n----------------------------------------\n\nClick here to download the handout for this course, which contains the database tables and other useful material for writing SQL queries.\n\nThus far, we have been performing JOINs on two tables. In this section, we will learn how to perform JOINs with multiple tables.\n\nThe dataset for this section\n\n----------------------------------------\n\nFor this section, we will use a new dataset for OfficeNook Company, which sells home office supplies, including electronics. OfficeNook stores data about their customers, orders, and products in four different tables. Take some time to familiarize yourself with the ERD and tables for this dataset:\n\nDatabase Layout\nERDCustomers TableOrders TableOrder Details TableProducts Table\n\nJoining more than two tables\n\n----------------------------------------\n\nSuppose you wanted to see each order's ID and date. You would query:\n\nView Schema\n\nAll orders\n\nSELECT o.OrderId, o.OrderDate\nFROM Orders o;\n\n\nSELECT o.OrderId, o.OrderDate FROM Orders o;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nNow suppose you wanted to rewrite this query to also include the product or products ordered for every order. By looking at the OfficeNook ERD above, we can tell that this query needs information from three tables: the Orders table (for OrderDate), the Products table (for ProductName), and the OrderDetails table (to connect the other two tables). The resulting query would look like this:\n\nView Schema\n\nAll orders with product listed\n\nSELECT o.OrderId, o.OrderDate, p.ProductName\nFROM (Orders o INNER JOIN OrderDetails od ON o.OrderID = od.OrderID)\nINNER JOIN Products p ON od.ProductID = p.ProductID;\n\n\nSELECT o.OrderId, o.OrderDate, p.ProductName FROM (Orders o INNER JOIN OrderDetails od ON o.OrderID = od.OrderID) INNER JOIN Products p ON od.ProductID = p.ProductID;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nThis query:\n\n 1. Joins the Orders table (aliased as o) with the OrderDetails table (aliased as od) on the OrderID field.\n\n 2. Joins the result of the first join with the Products table (aliased as p) on the ProductID field.\n\n 3. Selects the OrderId and OrderDate from the Orders table and the ProductName from the Products table.\n\nNotice that this query JOINs the three tables in the FROM statement. Some DBMS require that you use parentheses to JOIN two tables at a time; then, you can JOIN the third table to the joined product of the first two tables. This process is called \"nesting\" the JOINs and is particularly helpful when combining tables that have a direct relationship before linking them to additional tables. The \"nesting\" concept is similar to what is found in mathematical formulas as the SQL functions will work from the innermost parentheses and work outwards.\n\nAs another example of nested JOINs, let's repeat the query above but also include the customer's first and last name for each order. This means we will need to JOIN an additional table: Customers.\n\nView Schema\n\nAll orders with product and customer listed\n\nSELECT o.OrderId, o.OrderDate, c.FirstName, c.LastName, p.ProductName\nFROM ((Orders o INNER JOIN OrderDetails od ON o.OrderID = od.OrderID)\nINNER JOIN Products p ON od.ProductID = p.ProductID)\nINNER JOIN Customers c ON o.CustomerID = c.CustomerID;\n\n\nSELECT o.OrderId, o.OrderDate, c.FirstName, c.LastName, p.ProductName FROM ((Orders o INNER JOIN OrderDetails od ON o.OrderID = od.OrderID) INNER JOIN Products p ON od.ProductID = p.ProductID) INNER JOIN Customers c ON o.CustomerID = c.CustomerID;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nYou can JOIN as many tables as you want using the nesting pattern above. Care should be taken to only JOIN as many tables as needed. Joining additional tables beyond those needed can give different results than you would expect (especially with more complex database designs). The rule of thumb is that you only include the tables necessary to answer the question. That said, you will need to include interjoining tables to create a path to join data from two tables that do not share a key (like in our previous example using OrderDetails and Orders as linking tables to connect the Products and Customers tables). A good practice when joining multiple tables for complex queries is to start from the innermost JOIN, run it to confirm it produces the expected results, then add the next JOIN using parentheses, run it to confirm it produces the expected results, and so on until you complete the full nested JOIN.\n\nChoosing the correct field for each ON statement\n\n----------------------------------------\n\nUnderstanding the layout of the data source or sources you are querying is critical for choosing the correct fields to link through the ON statement. If you don't understand how the data is structured, then you may inadvertently JOIN using two fields that don't make sense to use. For example, if you wanted to show all orders, order dates, and the customers who placed those orders (first and last name), you would need to JOIN the Orders and Customers tables. If you're not careful, however, you may mistakenly JOIN the tables using the wrong fields like this:\n\nView Schema\n\nIncorrect JOIN example\n\nSELECT o.OrderId, o.OrderDate, c.FirstName, c.LastName\nFROM Orders o\nINNER JOIN Customers c ON o.OrderId = c.CustomerID;\n\n\nSELECT o.OrderId, o.OrderDate, c.FirstName, c.LastName FROM Orders o INNER JOIN Customers c ON o.OrderId = c.CustomerID;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nThe query successfully ran, but yielded no results, because there are no matches between the OrderID and CustomerID fields. The real danger arises if matches do exist between these fields, as the query would produce output rows, potentially leading you to mistakenly believe it generated the desired results.\n\nYou should always consult the ERD to avoid joining on incorrect fields. In most cases, linking fields often have the same name and are PK/FK relationships, connected by a line on the ERD. For example, by reading the OfficeNook ERD at the top of this page, you can see that the Orders and Customers tables are linked through the CustomerID field. Using this information, let's correct the erroneous query above to properly display all orders with the order date and customer name:\n\nView Schema\n\nCorrect JOIN example\n\nSELECT o.OrderId, o.OrderDate, c.FirstName, c.LastName\nFROM Orders o\nINNER JOIN Customers c ON o.CustomerID = c.CustomerID;\n\n\nSELECT o.OrderId, o.OrderDate, c.FirstName, c.LastName FROM Orders o INNER JOIN Customers c ON o.CustomerID = c.CustomerID;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nSome queries may correctly link on two fields that do not share the same name nor have a PK/FK relationship. For example, the dog dataset on the previous page had two tables connected on the PersonID and OwnerID fields. However, these types of linking fields are less common and will not appear in the remaining practice problems or quiz questions in this assignment.\n\nChoosing the order in which to JOIN multiple tables\n\nWhen joining multiple tables in SQL, the order of the JOINs may or may not matter depending on the type of JOINs used and the database engine's optimization process. In most cases, modern SQL engines automatically optimize the query execution, determining the most efficient order for the JOINs, regardless of how the query is written.\n\nHowever, in some scenarios, particularly with LEFT JOINs or OUTER JOINs, the order is significant because it affects which rows are preserved or excluded in the resulting dataset. For instance, if you use a LEFT JOIN, the table on the left-hand side will retain all its rows, even if there is no match in the joined table. Changing the order of the tables in such JOINs could lead to different results. Understanding the logical flow of JOINs and how they interact is essential for writing queries that return the desired output, especially in complex database structures.\n\nPractice\n\n----------------------------------------\n\nLet's practice implementing multi-table JOINs with the following problems.\n\nPractice problem 1\n\nPractice problem 2\n\nPractice problem 3\n\nPractice problem 4\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL_P2\\learning-module\\4-union.tsx",
    "text": "UNION and UNION ALL statements\n\n----------------------------------------\n\nClick here to download the handout for this course, which contains the database tables and other useful material for writing SQL queries.\n\nIn the last two sections, we focused on JOINs. In this section, we will learn how to combine data in a different way through a UNION set operation.\n\nThe dataset for this section\n\n----------------------------------------\n\nFor this section, we will use a new dataset containing student data. One table records students for the Spring 2024 semester and the other records students for the Fall 2024 semester. Notice that the tables are not connected to each other and that the tables have identical fields, making them suitable for unions.\n\nDatabase Layout\n\n----------------------------------------\n\nERDStudents_Spring2024 TableStudents_Fall2024 Table\n\nWhat are unions?\n\n----------------------------------------\n\nA UNION is a different way of combining data. Instead of connecting data using a JOIN, a UNION \"stacks\" data. Microsoft describes a UNION as the following:\n\n\"The UNION operator lets you combine two SELECT statements into one. The SELECT statements that you combine must have the same number of output fields, in the same order, and with the same or compatible data types. When you run the query, data from each set of corresponding fields is combined into one output field, so that the query output has the same number of fields as each of the select statements.\"\n\nThe image below shows two tables, Facebook and LinkedIn, and how you can use a UNION to stack the results in one of two ways: UNION or UNION ALL.\n\n\n\nLet's learn the difference between UNION and UNION ALL and how to use them in queries.\n\nUNION\n\n----------------------------------------\n\n\n\nA UNION combines and keeps unique values from two datasets. The basic SQL syntax for a UNION query is as follows:\n\nUNION syntax\n\nSELECT field_1\nFROM table_1\nUNION\nSELECT field_a\nFROM table_a;\n\n\nSELECT field_1 FROM table_1 UNION SELECT field_a FROM table_a;\n\nLet's consider a UNION example using our student dataset. To generate a list of all unique students between semesters (removing duplicate students), we would run the following query:\n\nView Schema\n\nSimple UNION query\n\nSELECT full_name FROM Students_Spring2024\nUNION\nSELECT full_name FROM Students_Fall2024;\n\n\nSELECT full_name FROM Students_Spring2024 UNION SELECT full_name FROM Students_Fall2024;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nIn this query, the UNION operator first combines the results together by stacking them into a single dataset. Since the UNION automatically removes duplicate rows, any student who is registered in both semesters will only appear once in the final output.\n\nJust like any other query, UNION queries can be sorted using ORDER BY. Let's sort the query we just did in alphabetical order:\n\nView Schema\n\nSimple UNION query sorted\n\nSELECT full_name FROM Students_Spring2024\nUNION\nSELECT full_name FROM Students_Fall2024\nORDER BY full_name;\n\n\nSELECT full_name FROM Students_Spring2024 UNION SELECT full_name FROM Students_Fall2024 ORDER BY full_name;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nA common mistake with the UNION operator is including columns that we do not need, which will change how the UNION filters the output. Continuing our previous example, let's suppose we mistakenly included the academic_year column with the full_name column. Run the query and see how many duplicate student names are kept in the output:\n\nView Schema\n\nIncorrect UNION query\n\nSELECT full_name, academic_year FROM Students_Spring2024\nUNION\nSELECT full_name, academic_year FROM Students_Fall2024\nORDER BY full_name; \n\n\nSELECT full_name, academic_year FROM Students_Spring2024 UNION SELECT full_name, academic_year FROM Students_Fall2024 ORDER BY full_name;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nWhile the query still ran, the UNION operator failed to remove duplicate students. Why? This is because the UNION operator removes duplicates rows - if even one value in a column is different between rows, then they are not considered duplicates and won't be removed. In this case, UNION did not remove the duplicate students because their academic year changed between semesters (i.e., freshmen became sophomores, sophomores became juniors, and juniors became seniors)!\n\nExercise caution when deciding which columns to include in your UNION operations. Study the ERD and tables for the dataset that you are querying to more effectively utilize UNION operations.\n\nUNION ALL\n\n----------------------------------------\n\n\n\nUNION ALL combines and keeps all values, even if there are duplicates. The basic SQL syntax for a UNION ALL query is as follows:\n\nUNION syntax\n\nSELECT field_1\nFROM table_1\nUNION ALL\nSELECT field_a\nFROM table_a;\n\n\nSELECT field_1 FROM table_1 UNION ALL SELECT field_a FROM table_a;\n\nReturning to the student database, let's suppose we want to list each student and their GPA from both semesters. In this case, we don't care if there are duplicate student-GPA pairs, so we can use a UNION ALL to keep every record:\n\nView Schema\n\nUNION ALL query\n\nSELECT full_name, gpa\nFROM Students_Spring2024\nUNION ALL\nSELECT full_name, gpa\nFROM Students_Fall2024;\n\n\nSELECT full_name, gpa FROM Students_Spring2024 UNION ALL SELECT full_name, gpa FROM Students_Fall2024;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nYou can use ORDER BY to sort UNION ALL queries, just like we did with the UNION queries. Let's sort the query we just did in alphabetical order so we can more easily see the duplicates we intentionally kept in our dataset:\n\nView Schema\n\nSorted UNION ALL query\n\nSELECT full_name, gpa\nFROM Students_Spring2024\nUNION ALL\nSELECT full_name, gpa\nFROM Students_Fall2024\nORDER BY full_name;\n\n\nSELECT full_name, gpa FROM Students_Spring2024 UNION ALL SELECT full_name, gpa FROM Students_Fall2024 ORDER BY full_name;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nThis dataset is getting more readable! However, sometimes it is nice to know which table a given row originated from. In the output we just created, we don't know whether each student-GPA combo is from Spring 2024 or Fall 2024. This can be easily remedied by creating a new column with a static value, as follows:\n\nView Schema\n\nLabelled UNION ALL query\n\nSELECT full_name, gpa, \"Spring 2024\" AS semester\nFROM Students_Spring2024\nUNION ALL\nSELECT full_name, gpa, \"Fall 2024\" AS semester\nFROM Students_Fall2024\nORDER BY full_name;  \n\n\nSELECT full_name, gpa, \"Spring 2024\" AS semester FROM Students_Spring2024 UNION ALL SELECT full_name, gpa, \"Fall 2024\" AS semester FROM Students_Fall2024 ORDER BY full_name;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nStatic columns are extremely useful for labelling the tables before you use a UNION operation. Feel free to experiment adding your own columns in the practice problems below!\n\nPractice problem 1\n\nPractice problem 2\n\nPractice problem 3\n\nAdditional Practice\n\n----------------------------------------\n\nIf you would like additional practice (this is not required), the following page talks about UNION operations: https://www.w3schools.com/sql/sql_union.asp\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL_P2\\learning-module\\5-distinct.tsx",
    "text": "DISTINCT\n\n----------------------------------------\n\nClick here to download the handout for this course, which contains the database tables and other useful material for writing SQL queries.\n\nIn the last section, we learned how the UNION operation stacks data and filters out duplicate records. But what if we want to filter out duplicates for non-union queries? This is where the DISTINCT keyword is used.\n\nThe DISTINCT keyword filters out duplicate values across one or more columns of the dataset. It can be used in many places in an SQL query, but we will only discuss DISTINCT in the SELECT clause and in the COUNT() function.\n\nThe dataset for this section\n\n----------------------------------------\n\nWe will use the student dataset again. For your reference, we have provided you with the ERD and tables to help you with the examples and practice problems in this section.\n\nDatabase Layout\n\n----------------------------------------\n\nERDStudents_Spring2024 TableStudents_Fall2024 Table\n\nDISTINCT in the SELECT clause\n\n----------------------------------------\n\nOne of the most frequent uses of DISTINCT is the SELECT DISTINCT statement. Let's return to the student dataset that we used to practice UNION operations. Suppose we want to identify each unique academic year in the Spring 2024 semester. If we don't use DISTINCT, we get the following:\n\nView Schema\n\nNon-DISTINCT query\n\nSELECT academic_year\nFROM Students_Spring2024; \n\n\nSELECT academic_year FROM Students_Spring2024;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nThis result set includes many duplicate values. Why? Because this query simply grabs the entire academic_year column from the Students_Spring2024 table. In other words, the academic year is listed for every student record in Spring 2024, which includes many duplicate academic years. To identify each unique academic year in the Spring 2024 semester, let's add the DISTINCT keyword to our SELECT clause:\n\nView Schema\n\nDISTINCT query\n\nSELECT DISTINCT academic_year\nFROM Students_Spring2024; \n\n\nSELECT DISTINCT academic_year FROM Students_Spring2024;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nNow our output displays \"Freshman\", \"Sophomore\", \"Junior\" and \"Senior\" only once each, just like we wanted! DISTINCT removed the duplicates and only returned the unique values.\n\nYou can add more fields into the SELECT DISTINCT clause too. In this case, let's return each unique combination of academic year and major for the Spring 2024 semester:\n\nView Schema\n\nDISTINCT with multiple fields\n\nSELECT DISTINCT academic_year, major\nFROM Students_Spring2024\nORDER BY academic_year;\n\n\nSELECT DISTINCT academic_year, major FROM Students_Spring2024 ORDER BY academic_year;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\nDISTINCT in the COUNT() function\n\n----------------------------------------\n\nDISTINCT is also powerful when used in the aggregate function COUNT(). If you need a review of aggregate functions and GROUP BY, refer to the Intro to SQL – Part 1 course.\n\nConsider this simple example:\n\nView Schema\n\nCOUNT() without DISTINCT\n\nSELECT COUNT(major) AS NumMajors\nFROM Students_Fall2024;   \n\n\nSELECT COUNT(major) AS NumMajors FROM Students_Fall2024;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nThis query attempts to count the number of majors among the Fall 2024 student body – however, it returns 25 as the number of majors offered, which we know is incorrect! This is because it is counting every instance of major in the Students_Fall2024 table, which would be 25 (one for each row in the table).\n\nTo correctly count the number of majors, we need to add the DISTINCT keyword:\n\nView Schema\n\nCOUNT() without DISTINCT\n\nSELECT COUNT(DISTINCT major) AS NumMajors\nFROM Students_Fall2024;   \n\n\nSELECT COUNT(DISTINCT major) AS NumMajors FROM Students_Fall2024;\nRun\nResults\nNo results. Click the ‘Run’ button to execute your query.\n\nNow the query removes the duplicates from the major column before counting them, returning the correct answer of four majors.\n\nDISTINCT is not difficult to use, but new SQL users may overuse DISTINCT or forget that it applies to every field in the SELECT DISTINCT clause. Like every other SQL concept we have learned, be sure to understand your dataset and determine if DISTINCT is appropriate for your query.\n\nPractice problem 1\n\nPractice problem 2\n\nGreat job practicing DISTINCT queries! Let's move on to the last of our new content: the LIMIT and OFFSET clauses.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL_P2\\learning-module\\6-limit-offset.tsx",
    "text": "LIMIT and OFFSET clauses\n\n----------------------------------------\n\nClick here to download the handout for this course, which contains the database tables and other useful material for writing SQL queries.\n\nIn the previous section, you learned how to use the DISTINCT keyword to remove duplicate rows from your query results. However, even with duplicates removed, your query might still return a substantial number of rows that you may not need or want. In real-world scenarios, databases may contain millions or even billions of rows of data. When working with such large datasets, it is often neither practical nor efficient to retrieve all rows at once, especially when only a small subset is needed.\n\nThat's where LIMIT and OFFSET come into play. These two clauses let you control how many rows are retrieved from a query and where to start retrieving them. This is especially useful when your tables become too large to display or analyze conveniently all at once.\n\nThe dataset for this section\n\n----------------------------------------\n\nWe will be using the student dataset again and have provided the ERD and tables for your reference during the examples and practice problems in this section.\n\nDatabase Layout\n\n----------------------------------------\n\nERDStudents_Spring2024 TableStudents_Fall2024 Table\n\n\nLIMIT x tells the database to stop returning rows after it has retrieved \"x\" number of rows. Imagine you want to see only the first 5 records in a table to quickly check if your data looks correct. Using LIMIT helps you to avoid getting overwhelmed by thousands of rows.\n\nExpand the following two tabs to see how LIMIT works (using the student dataset again):\n\nLIMIT\nLIMIT with ORDER BY\n\nLIMIT is a simple clause but is extremely useful in limiting your output rows. It becomes even more versatile when paired with another clause: OFFSET.\n\nOFFSET\n\n----------------------------------------\n\nSometimes, you don't want just the first part of the data; you might want to skip certain rows before returning the next set. That's where the OFFSET clause can be used. OFFSET xinstructs the query to skip the first \"x\" number of rows of the result, then return the rows after that.\n\nPagination 1\nPagination 2\nPagination 3\nPractice\n\n----------------------------------------\n\nPractice problem 1\n\nPractice problem 2a\n\nPractice problem 2b\n\nUsing the LIMIT and OFFSET clauses is essential when dealing with large or paginated data. It gives you precise control over which rows appear, making your SQL queries more efficient and user-friendly.\n\n * LIMIT reduces the total number of rows displayed.\n\n * OFFSET lets you skip a certain number of rows before returning the next set.\n\nClick \"Next\" to advance to the comprehensive practice problems in preparation for the graded quiz.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL_P2\\learning-module\\7-comprehensive-practice.tsx",
    "text": "Comprehensive practice problems\n\n----------------------------------------\n\nClick here to download the handout for this course, which contains the database tables and other useful material for writing SQL queries.\n\nApply your SQL skills with the following practice problems! Like the quiz, the practice problems are grouped by which dataset is being used (OfficeNook or Student). We again include the ERDs and tables for your reference as you write your queries.\n\nOfficeNookCo Database Layout\nERDCustomers TableOrders TableOrder Details TableProducts Table\n\n\nPractice problem 1\n\nPractice problem 2\n\nPractice problem 3\n\nPractice problem 4\n\nPractice problem 5\n\nStudent Database Layout\nERDStudents_Spring2024 TableStudents_Fall2024 Table\n\n\nPractice problem 6\n\nPractice problem 7\n\nPractice problem 8\n\nPractice problem 9\n\nClick \"Next\" to advance to the assignment summary followed by the graded quiz.\n\n----------------------------------------"
  },
  {
    "pageId": "INTRO_TO_SQL_P2\\learning-module\\8-summary.tsx",
    "text": "Summary\n\n----------------------------------------\n\nIn this assignment, you learned how to utilize different types of JOIN clauses to combine related records from multiple tables. You also learned how to stack data using UNION and UNION ALL, and how to filter using DISTINCT, LIMIT, and OFFSET.\n\nBefore advancing to the graded quiz, it may be helpful to:\n\n * Download the student handout for this assignment.\n\n * Review the vocabulary below\n\n * Go back to any topics you found tricky\n\nVocabulary\n\n----------------------------------------\n\n * Relational database: A type of database that stores data in tables connected by defined relationships, typically using primary and foreign keys.\n\n * Entity-Relationship Diagram (ERD): A visual representation of the structure of a database.\n\n * JOIN: A SQL command used to combine data from two or more tables based on a related column.\n\n * INNER JOIN: Returns rows with matching values.\n\n * LEFT JOIN: Includes all rows from the left table.\n\n * RIGHT JOIN: Includes all rows from the right table.\n\n * CROSS JOIN: Cartesian product of rows.\n\n * FULL OUTER JOIN: All rows from both tables.\n\n * UNION: Combines SELECT results, removing duplicates.\n\n * UNION ALL: Combines SELECT results, keeping duplicates.\n\n * DISTINCT: Removes duplicate results.\n\n * LIMIT: Restricts the number of results.\n\n * OFFSET: Skips rows before returning results.\n\n * COUNT(): Returns the number of rows.\n\n * Primary key (PK): Uniquely identifies each record.\n\n * Foreign key (FK): Connects rows in different tables.\n\n * Pagination: Splits results into pages.\n\nLearning Objectives\n\n----------------------------------------\n\n 1. Understand the structure and purpose of SQL.\n\n 2. Learn basic clauses like JOINs, UNIONs, DISTINCT, LIMIT, and OFFSET.\n\n 3. Practice querying and interpreting relational data.\n\nClick “Begin Quiz” to move on to the graded quiz.\n\n----------------------------------------"
  },
  {
    "pageId": "MELODY_MAKERS\\learning-module\\1-background.tsx",
    "text": "Background on Melody Makers\n\n----------------------------------------\n\nMelody Makers Inc, a private company based in Nashville, Tennessee, is committed to spreading musical joy across the United States. The company requires an audit to maintain its bank loan. It is January 18th, 20X2 and your accounting firm is conducting an audit of their financial statements. As the auditor, your role is to evaluate the control risk within a segment of the purchase-to-pay (P2P) cycle. This assessment is crucial, as it will significantly influence the evaluation of internal controls over financial reporting. Consequently, it will influence the control risk in the audit risk model and determine the extent of testing required (detection risk).\n\nControls at Melody Makers\n\nMelody Makers manages its expenditure cycle as follows: The process starts when an employee initiates a purchase through a requisition. The employee fills out the requisition form and sends it to a buying agent in the purchasing department. The buying agent reviews the requisition and decides whether to approve it. Upon approval, the agent issues a purchase order (PO) and selects a vendor from the approved vendor list, also signing the PO to indicate approval. Subsequently, the buying agent distributes copies of the purchase order to the employee who made the request, the vendor, and the accounts payable manager.\n\nWhen goods are shipped to Melody Makers, they arrive with a bill of lading. An employee in the receiving department inspects the goods and prepares a receiving report detailing the received items, quantities, and any pertinent notes (e.g., damages). The receiving department manager signs the receiving report to confirm the inspection. The original report is filed in the receiving department, and copies are sent to the warehouse, purchasing department, and accounts payable.\n\nAlong with shipping the goods, the vendor sends an invoice to the accounts payable department requesting payment. Upon receiving the invoice, the accounts payable department reviews and signs it. If the approved PO, invoice, and receiving report all match, they prepare a voucher cover and sign it, indicating approval for payment. The signed voucher packet, which includes the voucher cover, PO, invoice, and receiving report, is then sent to the cashier for payment issuance to the vendor. The following diagram illustrates the flowchart of this process.\n\n\n\nYour audit task involves focusing solely on this part of the purchase-to-pay (P2P) process. Another auditor will examine the remaining parts of the P2P process.\n\nBryce Saulls, your auditing colleague, has already reviewed 25 out of the 30 voucher packets selected for the audit. He has now been reassigned to another project, and your audit senior has asked you to complete this task by examining the remaining five voucher packets and finalizing the work papers. Before Bryce left, he recorded a video showing his evaluation of one of the 25 voucher packets. This video, provided below, will help explain the task you need to perform. Before watching the video, please download these two files and familiarize yourself with their contents.\n\n * Voucher Packets - This file contains scanned copies of the 30 voucher packets sorted by voucher number.\n\n * Audit Workpapers - This file contains the audit workpapers. Tab \"5\" is where you will document your work for each voucher packet, as demonstrated in the video. The “D24” tab is where you will document your conclusions.\n\n\nTask\n\nYour task is to review the remaining 5 voucher packets starting with #46214 (pages 101-120) and complete the audit papers, including audit paper 5, as shown in the video. The results on audit paper 5 automatically update as you enter the data in the fields in work paper D24.\n\nThe relevant employees at Melody Makers are\n\n * Noah Roberts - Accounts Payable Manager\n\n * Luis Martinez - Receiving Manager\n\n * Grace Wilson - Buying Agent\n\n * Whitney Johnson - Buying Agent\n\n * Mei Chen - Buying Agent\n\nWhen you have finished, click the Next button to continue.\n\n----------------------------------------"
  },
  {
    "pageId": "MELODY_MAKERS\\learning-module\\2-instructions.tsx",
    "text": "Interview Instructions\n\n----------------------------------------\n\nNow that you have completed the initial testing of the last five voucher packets, you can proceed to the next audit step, which involves thoroughly understanding any issues identified during your or Bryce’s testing. Keep in mind that although Bryce tested the first 25 packets, you are responsible for understanding his work and providing the final documentation of the audit tests for all 30 packets.\n\nTo gain more information about the problems that either you or Bryce noted because of your testing, you have scheduled an interview with Noah Roberts, the accounts payable manager (pictured below). Noah has been working with Melody Makers for 13 months now. He was hired by the company after graduating with an accounting degree from a nearby university.\n\n\n\nThe purpose of your interview is to gather evidence that will help you determine which, if any, of the issues you or Bryce identified are actual control deviations. Whenever possible, find corroborating evidence to support what Noah says and include that evidence in the work papers. You may find evidence he already collected in the voucher packet file if he included it there.\n\nRemember, incorrectly concluding that something is a control deviation will make the audit less efficient as you will need to do more unnecessary work. Conversely, failing to identify an actual control deviation can make the audit less effective and could expose you to litigation or other negative consequences.\n\nRecognize that Noah only has a limited amount of time to visit with you. Prepare well for your interview you so you do not waste his time. When you are ready, navigate to the next page to start your chat with Noah. You should act professionally with him. If you do not, he may end the interview, preventing you from getting the information you need and potentially reporting this to your supervisor.\n\nNoah has an important meeting to attend soon. He will end the interview and let you know when he needs to leave. If you are finished asking questions before he excuses himself, end the meeting with a brief, professional message, such as \"thank you for your time today, I am finished with my questions.\"\n\n----------------------------------------"
  },
  {
    "pageId": "MELODY_MAKERS\\learning-module\\5-conclusion.tsx",
    "text": "Conclusion\n\n----------------------------------------\n\nWatch this video carefully as answers to several final questions are listed in it.\n\n\n\nNow that you've completed the case, you're ready for the quiz. Please click \"Begin Quiz\" to start. Good luck!\n\n----------------------------------------"
  },
  {
    "pageId": "PROMPT_ENGINEERING\\learning-module\\1-introduction.tsx",
    "text": "Introduction\n\n----------------------------------------\n\nIn today’s rapidly evolving business landscape, mastering prompt engineering can significantly help accounting professionals by enhancing their ability to leverage artificial intelligence (AI) effectively. As AI increasingly integrates into accounting workflows, the ability to communicate with AI through well-crafted prompts is an important skill to develop. Prompt engineering allows accountants to maximize AI’s capabilities, ensuring accurate data analysis, automating routine tasks, and improving decision-making processes. By learning and applying prompt engineering, accountants can transform their role, moving beyond traditional number-crunching to take on more strategic and impactful responsibilities within their organizations.\n\nThe entire economy, and the accounting industry specifically, is experiencing a paradigm shift due to AI. Tasks that were once manual and time-consuming are now being automated, freeing up accountants to focus on higher-value activities such as strategic analysis, advisory services, and decision-making. This shift is not only enhancing productivity but also changing the nature of the accounting profession. With AI, particularly through the capabilities of Large Language Models (LLMs) like GPT-4, accountants can automate the generation of financial reports, draft client communications, and even create tailored analyses of financial trends, all with improved speed and accuracy. To leverage these tools effectively, accountants need to understand a new skill: prompt engineering.\n\nBefore we continue, let’s clarify what prompt engineering actually is. At its core, prompt engineering involves crafting the specific inputs—what you type into AI tools like ChatGPT, Gemini, or other large language models—to guide the AI in generating accurate and relevant outputs. For accountants, this means being able to ask the right questions or provide the right context to an AI tool to get useful results. For example, if you need to analyze a large dataset for unusual transactions, a prompt could instruct the AI to “Identify any transactions over $10,000 that occurred outside of normal business hours.” Similarly, when drafting a financial report, you might prompt the AI to “Generate a summary of the company’s quarterly financial performance, highlighting any significant deviations from budgeted figures.” By mastering prompt engineering, accountants can ensure that AI tools provide the most accurate and valuable insights for their specific needs.\n\nThis training will focus on the fundamentals of successful prompt engineering, providing you with a solid foundation to build upon. As this field is rapidly evolving, ongoing learning and practice will be essential. It’s important to remember that you don’t have to be perfect when starting out. Experimentation is key—trying different approaches will help you discover what works best and what doesn’t. Prompt engineering is an accessible skill, and each prompt, whether successful or not, offers valuable insights into how you can effectively collaborate with AI to enhance your productivity.\n\n----------------------------------------"
  },
  {
    "pageId": "PROMPT_ENGINEERING\\learning-module\\10-data-analysis.tsx",
    "text": "Data Analysis and Risk Management\n\n----------------------------------------\n\nExample\n\nImagine you’re working on a complex financial model that requires a fuzzy match between items in column A and column B. Traditionally, this would involve large Excel formulas that can be time-consuming to write and debug.\n\nDiscussion\n\nGenAI can significantly streamline this process. It can help write complex formulas and even assist in troubleshooting when formulas aren’t working as expected. This not only saves time but also reduces the risk of errors in your financial models.\n\nHypothetical Prompt\n\nI need help creating an Excel formula for a fuzzy match between items in column A and column B. The match should:\n\n * Allow for slight spelling variations and typos\n\n * Return the best match if an exact match isn't found\n\n * Include a confidence score for each match\n\nPlease provide the formula in Excel syntax and explain how each part of the formula works. Also, suggest any potential limitations or considerations when using this formula.\n\nPrompt Effectiveness\n\nThis prompt uses constrained prompting by clearly specifying the requirements for the fuzzy match formula. It also employs chain-of-thought prompting by requesting an explanation of the formula’s components and potential limitations, encouraging a more comprehensive and educational response.\n\n----------------------------------------\n\nExample\n\nAs an auditor, you’re tasked with performing a fraud risk assessment for your organization. You have collected data about the area, past problems, current issues, and your concerns, but synthesizing this information into a comprehensive risk assessment is challenging.\n\nDiscussion\n\nGenAI can be a powerful tool in brainstorming and identifying potential fraud risks. By inputting your collected data and concerns, you can leverage GenAI to generate a comprehensive set of potential risks that you might not have considered otherwise.\n\nHypothetical Prompt\n\nAct as an experienced fraud auditor. Based on the following information about our organization, generate a comprehensive fraud risk assessment:\n\n[Insert collected data about the area, past problems, current issues, and concerns]\n\nPlease provide:\n\n 1. A list of potential fraud risks, categorized by type (e.g., financial reporting fraud, asset misappropriation, corruption)\n\n 2. For each risk, provide a brief explanation of why it’s relevant to our organization\n\n 3. Suggest potential red flags or indicators for each identified risk\n\n 4. Recommend initial steps for mitigating each risk\n\nFormat the output as a structured report suitable for presentation to senior management.\n\nPrompt Effectiveness\n\nThis prompt effectively uses role prompting by asking the AI to act as an experienced fraud auditor. It also employs multi-step prompting by breaking down the risk assessment into clear, sequential tasks. The prompt encourages comprehensive output by requesting not just a list of risks, but also explanations, indicators, and mitigation strategies.\n\n----------------------------------------\n\nExample\n\nDuring an internal audit, you want to assess the soft controls within the organization through sentiment analysis. Soft controls are cultural and behavior-influencing factors that can significantly impact an organization’s risk profile and operational effectiveness.\n\nDiscussion\n\nGenAI can be used to conduct sophisticated analyses of employee feedback, identifying negative sentiments or cultural issues that might warrant further investigation. This approach can provide valuable insights into management practices and cultural aspects that traditional audit methods might miss.\n\nHypothetical Prompt\n\nAssume the role of an experienced internal auditor specializing in auditing culture and behavior. Based on the attached text (obtained from an employee satisfaction survey), conduct an analysis according to the eight soft controls from the integrity model as defined by Muel Kaptein:\n\n1. Clarity 2. Role Modeling 3. Achievability 4. Commitment 5. Transparency 6. Accountability 7. Enforcement 8. Openness to Criticism\n\nFor each category:\n\n * Identify key themes or patterns in the employee feedback\n\n * Highlight any areas of concern or potential risk\n\n * Suggest areas that may require further investigation\n\n * Provide recommendations for improvement\n\nPresent your analysis in a structured report format, suitable for inclusion in an internal audit report.\n\n[Include the section with open comments from an employee satisfaction survey or copy and paste into the chat]\n\nPrompt Effectiveness\n\nThis prompt demonstrates effective use of role prompting by asking the AI to act as a specialized internal auditor. It employs constrained prompting by specifying the exact framework (Muel Kaptein’s eight soft controls) to be used in the analysis. The prompt also uses multi-step prompting by breaking down the analysis into clear tasks for each category. By requesting a structured report format, it promotes the creation of a professional, audit-ready document.\n\nThese examples illustrate how GenAI can enhance data analysis and risk management in accounting, from handling complex Excel formulas to conducting nuanced assessments of organizational culture. By leveraging GenAI in these ways, accountants can uncover deeper insights, identify risks more effectively, and provide more value to their organizations or clients.\n\n----------------------------------------"
  },
  {
    "pageId": "PROMPT_ENGINEERING\\learning-module\\11-reporting.tsx",
    "text": "Reporting and Documentation\n\n----------------------------------------\n\nGenAI is improving the way accountants approach reporting and documentation tasks. Here are three examples of how GenAI is being used in this area:\n\nExample\n\nYou’ve just finalized an audit and have compiled your findings. Now, you need to draft a comprehensive report for the audit committee, synthesizing the objective, scope, and findings into a clear, actionable document.\n\nDiscussion\n\nGenAI can significantly streamline the report writing process. By inputting your audit details, you can quickly generate a well-structured report that effectively communicates your findings. Moreover, GenAI’s versatility allows you to easily adapt the report for different audiences, such as line management, with minimal additional effort.\n\nHypothetical Prompt\n\nAct as an experienced internal auditor drafting a report for the audit committee. Use the following information to create a comprehensive audit report:\n\nObjective: [Insert audit objective] Scope: [Insert audit scope] Findings: [List key findings]\n\nThe report should include:\n\n 1. An executive summary\n\n 2. Detailed explanation of each finding, including its risk level and potential impact\n\n 3. Recommendations for addressing each finding\n\n 4. A timeline for implementing recommendations\n\n 5. Conclusion\n\nFormat the report in a professional structure suitable for presentation to the audit committee.\n\nPrompt Effectiveness\n\nThis prompt employs role prompting by asking the AI to act as an experienced internal auditor. It uses constrained prompting by specifying the exact components the report should include. The prompt also encourages comprehensive output by requesting detailed explanations and recommendations for each finding.\n\n----------------------------------------\n\nExample\n\nYou have a detailed written control narrative and need to convert it into a clear, visual flowchart for easier comprehension and presentation.\n\nDiscussion\n\nGenAI can automate the process of turning text-based control narratives into visual flowcharts using open-source tools like Mermaid. This not only saves time but also ensures consistency in documentation across different audits or projects.\n\nHypothetical Prompt\n\nI have a control narrative that I need to convert into a flowchart using Mermaid syntax. Here’s the narrative:\n\n[Insert control narrative text]\n\nPlease:\n\n * Analyze the narrative and identify the key steps or decision points\n\n * Create a flowchart structure that accurately represents the process described in the narrative\n\n * Write the Mermaid code to generate this flowchart\n\n * Provide any notes on areas where the flowchart might not fully capture nuances in the narrative, requiring manual review or adjustment\n\n[The output is then entered into the Mermaid website to automatically generate the editable flowchart]\n\nPrompt Effectiveness\n\nThis prompt uses multi-step prompting by breaking down the task into clear, sequential steps. It employs constrained prompting by specifying the exact output needed (Mermaid code). The prompt also encourages critical thinking by requesting notes on potential limitations, promoting a more thorough and accurate final product.\n\n----------------------------------------\n\nExample\n\nYou’ve completed a written audit report and want to convert it into a more engaging video format for easier consumption by stakeholders.\n\nDiscussion\n\nGenAI can transform written audit reports into scripts suitable for video presentation. These scripts can then be used with AI avatar technology, such as Synthesia, to create professional-looking video reports. This approach can make complex audit findings more accessible and engaging for a wider audience.\n\nHypothetical Prompt\n\nI need to convert the following written audit report into a script for a video presentation. The video should be engaging, clear, and suitable for a general business audience who may not have deep accounting knowledge.\n\n[Insert written audit report]\n\nPlease create a script that:\n\n 1. Starts with a brief, attention-grabbing introduction\n\n 2. Summarizes the key findings in a clear, concise manner\n\n 3. Explains any technical terms in simple language\n\n 4. Includes suggestions for visual elements (charts, graphs, etc.) to illustrate key points\n\n 5. Ends with a clear summary of recommendations and next steps\n\n 6. Is approximately 5 minutes long when read at a normal speaking pace\n\nFormat the script with clear sections and include notes for visual elements or transitions between topics.\n\nPrompt Effectiveness\n\nThis prompt uses constrained prompting by specifying the exact elements the video script should include and its target length. It encourages comprehensive output by requesting not just a translation of the written report, but also suggestions for visual elements and explanations of technical terms. The prompt also promotes accessibility by specifying the target audience, ensuring the script is suitable for viewers without deep accounting knowledge.\n\nThese examples demonstrate how GenAI can enhance reporting and documentation in accounting, from generating adaptable written reports to creating visual process documentation and engaging video presentations. By leveraging GenAI in these ways, accountants can communicate their findings more effectively, making complex information more accessible and actionable for various stakeholders.\n\n----------------------------------------"
  },
  {
    "pageId": "PROMPT_ENGINEERING\\learning-module\\12-communication.tsx",
    "text": "Communication and Content Creation\n\n----------------------------------------\n\nGenAI has transformed the way accountants approach communication and content creation tasks. Here are three examples of how GenAI is being used in this area:\n\nExample\n\nYou’re a tax professional looking to draft a personalized email to a client, identifying potential additional services based on their previous year’s tax return.\n\nDiscussion\n\nBy using a private GenAI tool to analyze a client’s tax return (with sensitive information removed), you can quickly identify upsell opportunities and draft a personalized email. This approach not only saves time but also ensures that you’re offering relevant, value-added services to your clients.\n\nHypothetical Prompt\n\nI’ve uploaded a client’s last year’s tax return to our private GenAI tool. Based on this information:\n\n 1. Identify 3-5 additional services our tax firm could offer this client\n\n 2. For each service, provide a brief explanation of why it would be beneficial based on their tax situation\n\n 3. Draft a professional, personalized email to the client that:\n\nThe tone should be professional yet warm, and the email should be no longer than 300 words.\n\nPrompt Effectiveness\n\nThis prompt uses constrained prompting by specifying the exact elements the email should include and its maximum length. It encourages comprehensive output by requesting not just identification of services, but also explanations of their benefits. The prompt also promotes personalization by asking for a recap of the client’s tax situation, ensuring the email feels tailored to the individual client.\n\n----------------------------------------\n\nExample\n\nYour firm has prepared tax planning recommendations for a client for the upcoming year, and you want to ensure they are clear, accurate, and effective before sending them to the client.\n\nDiscussion\n\nGenAI can act as a preliminary editor, reviewing your recommendations for clarity, consistency, and potential improvements. By using a two-step process, you can first get guidelines for good editing practices and then apply these to your specific document.\n\nHypothetical Prompt (Step 1)\n\nWhat are the key things a good editor should look for when reviewing tax planning recommendations? Please provide a comprehensive list of editing guidelines.\n\nHypothetical Prompt (Step 2)\n\nUsing these editing guidelines:\n\n[Paste in editing guidelines from first prompt]\n\nPlease review and edit the following tax planning recommendations:\n\n[Insert tax planning recommendations]\n\nSuggest any additional recommendations that might be relevant based on the information provided and provide the edited version along with a summary of the changes made and any suggestions for improvement.\n\nPrompt Effectiveness\n\nThis two-step approach demonstrates effective use of recursive prompting, where the output from one prompt directly informs and is incorporated into the next. The first prompt uses zero-shot prompting to generate general editing guidelines. The second prompt then employs few-shot prompting by including these guidelines, providing a clear framework for the AI to follow. It also uses constrained prompting by specifying the exact tasks to be performed on the tax planning recommendations. By requesting additional relevant recommendations and a summary of changes, the prompt encourages comprehensive output that goes beyond simple editing to provide added value.\n\n----------------------------------------\n\nExample\n\nYour company offers GenAI advisory services based on the governance framework at https://www.genai.global/, and you want to create a LinkedIn post and image to showcase your services.\n\nDiscussion\n\nGenAI can help create engaging social media content that effectively communicates your services while adhering to platform-specific best practices. This can save time and ensure your marketing messages are clear, concise, and impactful.\n\nHypothetical Prompt\n\nOur company offers GenAI services based on the governance framework at http://genai.global/. We want to create a LinkedIn post and accompanying image to showcase our services. Please:\n\n 1. Draft a LinkedIn post (maximum 200 words) that:\n\n 2. Describe an image that could accompany this post, including:\n\n 3. Suggest 3-5 relevant hashtags to accompany the post\n\nThe tone should be professional, innovative, and trustworthy.\n\nPrompt Effectiveness\n\nThis prompt employs constrained prompting by specifying the exact elements the LinkedIn post and image description should include, as well as the maximum word count for the post. It uses multi-step prompting by breaking down the task into clear, sequential steps (post content, image description, hashtags). The prompt also encourages creativity while ensuring the output aligns with the company’s professional image and service offerings.\n\nThese examples illustrate how GenAI can enhance communication and content creation in accounting, from drafting personalized client emails to editing complex documents and creating engaging marketing content. By leveraging GenAI in these ways, accountants can communicate more effectively with clients, ensure the quality of their deliverables, and promote their services more efficiently.\n\n----------------------------------------"
  },
  {
    "pageId": "PROMPT_ENGINEERING\\learning-module\\13-training.tsx",
    "text": "Training and Development\n\n----------------------------------------\n\nGenAI is improving the way accountants approach training and development. Here are two examples of how GenAI is being used in this area:\n\nExample\n\nYou’re preparing for the CPA exam and want to ensure you’re truly mastering the material, not just memorizing facts. You decide to use GenAI to create challenging scenarios that test the depth of your understanding.\n\nDiscussion\n\nAdversarial prompting in GenAI can simulate complex, real-world scenarios that go beyond simple fact-checking. By challenging your knowledge with conflicting information or nuanced situations, this approach can help you develop a deeper understanding of accounting principles and their practical applications.\n\nHypothetical Prompt\n\nI’m studying for the CPA exam, focusing on the Auditing and Attestation (AUD) section. I want you to act as an adversarial examiner to test my understanding. Please:\n\n 1. Present a complex auditing scenario that involves a potential conflict between auditor independence and client relationships.\n\n 2. Provide three possible courses of action an auditor might take in this scenario.\n\n 3. After presenting the scenario and challenges, ask me which course of action I would choose and why.\n\n 4. Regardless of my answer, present a counter-argument that forces me to defend my choice and consider alternative perspectives.\n\n 5. Finally, provide the most ethically and professionally sound course of action, explaining why it’s the best choice despite any challenges it might present.\n\nThroughout this exercise, use language and scenarios similar to what I might encounter in the actual CPA exam.\n\nPrompt Effectiveness\n\nThis prompt demonstrates effective use of adversarial prompting by creating a scenario that challenges the user’s understanding from multiple angles. It employs role prompting by asking the AI to act as an adversarial examiner. The prompt encourages comprehensive output by requesting not just a scenario, but also multiple perspectives, challenges, and counter-arguments. By asking the AI to respond to the user’s choice, it creates an interactive, dynamic learning experience. This approach helps develop critical thinking skills and a nuanced understanding of complex auditing principles, which are crucial for success in the CPA exam and real-world auditing situations.\n\n----------------------------------------\n\nExample\n\nYou’re on a business trip and want to use your travel time to learn about new developments in accounting technology. You decide to use a voice-activated GenAI capable of listening and responding (like ChatGPT 4.0 on the phone).\n\nDiscussion\n\nVoice-activated GenAI opens up new possibilities for learning on the go. It allows you to engage in interactive learning sessions, ask follow-up questions, and even request entertaining content to reinforce your understanding, all without needing to type or look at a screen.\n\nHypothetical Prompt (Initial Question)\n\n\"Can you explain what RAG means in the context of GenAI?\"\n\n[After receiving the explanation, you might ask follow-up questions like the following]\n\n * \"How is RAG different from traditional language models?\"\n\n * \"To help me remember this better, can you tell me a funny story that illustrates how RAG works in GenAI?\"\n\nPrompt Effectiveness\n\nThis series of prompts demonstrates effective use of chain-of-thought prompting. The initial question uses zero-shot prompting to request an explanation of a specific concept. The follow-up questions then build on this knowledge, encouraging a deeper understanding. By requesting a funny story, the prompt leverages the power of associative memory, making the technical concept more memorable. This approach takes advantage of the voice-activated format, allowing for a natural, conversational learning experience that can easily adapt to the user’s level of understanding and interest.\n\nThese examples showcase how GenAI can transform training and development in accounting, from creating comprehensive study plans for professional exams to enabling on-the-go learning experiences. By leveraging GenAI in these ways, accountants can enhance their learning efficiency, tailor their education to their specific needs, and stay up-to-date with industry developments even during busy times.\n\n----------------------------------------"
  },
  {
    "pageId": "PROMPT_ENGINEERING\\learning-module\\14-next-steps.tsx",
    "text": "Next Steps\n\n----------------------------------------\n\n\n\n----------------------------------------"
  },
  {
    "pageId": "PROMPT_ENGINEERING\\learning-module\\15-conclusion.tsx",
    "text": "Conclusion\n\n----------------------------------------\n\nThis training course introduced you to the cutting-edge field of prompt engineering in accounting, showcasing how advanced generative AI technologies, particularly large language models, can revolutionize accounting practices. You developed skills to create precise and effective prompts, enabling you to harness the full potential of AI tools. The course emphasized practical application, guiding you through the process of evaluating AI outputs for their relevance and accuracy in accounting contexts. You gained hands-on experience in leveraging AI to streamline accounting tasks, extract valuable insights from complex data, and enhance communication with various stakeholders. Additionally, the training covered critical aspects of responsible AI integration, including ethical considerations and industry best practices, ensuring you're now well-equipped to implement AI solutions in accounting workflows both efficiently and ethically.\n\nLearning Objectives\n\n 1. Recognize the basic concepts of generative AI, including its benefits and drawbacks in accounting contexts.\n\n 2. Identify techniques for crafting effective AI prompts, including zero-shot, few-shot, and chain-of-thought prompting.\n\n 3. Distinguish between practical examples of generative AI in accounting and evaluate their potential effects on the field.\n\n 4. Recognize ethical considerations in using AI for accounting tasks and identify responsible AI practices.\n\nKey Terms\n\n * Adversarial Prompting: Challenging the AI's responses by intentionally providing counterarguments or conflicting information.\n\n * AI Governance Framework: A structure of policies and practices to ensure responsible and ethical use of AI within an organization. The training mentions the framework at genai.global.\n\n * Chain-of-thought Prompting: A technique that guides the AI through a step-by-step reasoning process.\n\n * Constrained Prompting: Setting specific parameters or limitations within which the AI must operate.\n\n * Ethical AI Use: The responsible application of AI technologies, adhering to ethical guidelines and considering potential impacts on individuals and society.\n\n * Few-shot Prompting: A method of providing the AI with a few examples before asking it to complete a task.\n\n * Generative AI (GenAI): AI systems capable of creating new content, such as text, images, or code, based on patterns learned from training data.\n\n * Large Language Models (LLMs): Advanced AI systems trained on vast amounts of text data, capable of understanding and generating human-like text. The training material mentions GPT-4 as an example.\n\n * Multi-step Prompting: Guiding the AI through a series of individual prompts, each addressing a specific aspect of the overall task.\n\n * Prompt Engineering: The practice of crafting effective inputs for AI systems to generate desired outputs. This is a central concept throughout the training.\n\n * Recursive Prompting: Using the output from one prompt as the input for another, allowing for iterative refinement.\n\n * Role Prompting: Instructing the AI to take on a specific role or perspective when generating responses.\n\n * Zero-shot Prompting: A technique where the AI is asked to perform a task without any examples or additional context.\n\n----------------------------------------"
  },
  {
    "pageId": "PROMPT_ENGINEERING\\learning-module\\2-background.tsx",
    "text": "Background on Accounting and Automation\n\n----------------------------------------\n\n\n\n----------------------------------------"
  },
  {
    "pageId": "PROMPT_ENGINEERING\\learning-module\\3-basics.tsx",
    "text": "Basics of Prompt Engineering\n\n----------------------------------------\n\nPrompt engineering is both an art and a science. It requires a clear understanding of how AI models process information and generate responses and the ability to be creative. Before we teach about prompt engineering, we have created a widget to help you see how GenAI works at a basic level. Click through the widget and read the “how it works” description at the bottom of the widget.\n\nGenAI Demo: Next Word Prediction\n\nThe quick brown fox jumps over the lazy\n\nTemperature: 0.5\n\nSelect WordNew Sentence\nHow It Works\n\nThis demo simulates how a Generative AI model might predict the next word in a sentence. The temperature slider controls the randomness of the word probabilities:\n\n * Temperature of 0: The model becomes completely deterministic, always choosing the word with the highest initial probability.\n * Low temperature (closer to 0): The probabilities become more deterministic, strongly favoring initially high-probability words.\n * High temperature (closer to 1): The probabilities become more uniform, giving initially lower-probability words a better chance.\n\nThe bar chart shows the probability of each possible word, updated in real-time as you adjust the temperature. When you click \"Select Word\", the app chooses a word based on these probabilities, simulating the AI's decision process.\n\nNote: This demo is a simplified representation. In a real AI model, there would be many more possible words (potentially thousands or even millions) for each prediction. We've limited it to five words here for clarity and ease of visualization. Also, in practice, the initial probabilities would be based on the model's training rather than random assignment.\n\nHere’s additional explanation of what is happening with GenAI. When a user enters a prompt, it guides the AI model by influencing the probabilities of which word comes next. For example, consider the phrase included in the above widget, “To be or not to be, that is the...” A prompt can significantly alter the likely word choices that follow. If the prompt before this sentence was “I want a very surprising and funny result for this sentence,” the AI might choose unexpected words like “pickle,” “waffle,” “penguin,” “spatula,” or “taco.” On the other hand, if the prompt before the sentence was “I want a very traditional result for this sentence,” the AI would be more likely to select words like “question,” “dilemma,” “issue,” or “problem.” This demonstrates how dramatically a prompt can impact the AI’s output.\n\nThe key to effective prompting lies in clarity, brevity, and iterative refinement. A well-crafted prompt is clear and specific, ensuring that the AI understands the task at hand. It is also concise, providing just enough information to guide the model without overwhelming it. When prompts are very long, the AI may miss some of the details or be unable to do everything in the prompt if there are conflicting statements. When longer prompts are needed, generally it is better to put the most critical details early in the prompt.\n\nEven the most carefully crafted prompt may not yield the desired result on the first try. This is why iterative refinement, where prompts are adjusted based on the output, is crucial to the process. Feedback loops—where you analyze the AI’s response and adjust your prompt accordingly—play an important role in refining prompts to achieve the best possible outcomes. You can even use the AI as a feedback tool to improve your prompting. For instance, imagine you enter the following:\n\n * Original Prompt: \"Tell me a funny joke about accountants.\"\n * GenAI Response: \"Why did the accountant break up with the calculator? Because it was constantly trying to divide their attention!\"\n * Updated Prompt: \"Tell me how I can improve the prompt: Tell me a funny joke about accountants.\"\n * GenAI Response: \"To improve the prompt for generating a more tailored or creative response, you could add specific details or a desired tone. Here are a few examples:\n   \n   1. Contextual Prompt: \"I'm looking for a clever and light-hearted joke about accountants that would make someone in finance laugh.\"\n   \n   2. Tone-Specific Prompt: \"Can you tell me a witty and dry humor joke about accountants?\"\n   \n   3. Themed Prompt: \"Tell me a funny joke about accountants that plays on tax season stress.\"\n   \n   4. Audience-Specific Prompt: \"Share a funny accountant joke that would be perfect for a corporate office meeting.\"\n   \n   These variations give the prompt more direction, which can lead to a joke that's better suited to your needs.\n\nAt this point, you could even ask the AI to explain why these prompts are better, helping you learn how to improve your original prompt in the future. It's important to note that most AI chatbots are designed to remember your previous prompts in the same prompt window, enabling ongoing conversations. However, be aware that some implementations of GenAI do not have this capability, so you may need to include all relevant information in a single prompt.\n\nIn addition to what has been discussed, there are three basic prompt engineering techniques that can help you improve your prompting: zero-shot prompting, few-shot prompting, and chain-of-thought prompting.\n\nZero-shot Prompting\n\nZero-shot prompting involves asking the AI to perform a task without any examples. This technique relies on the model’s pre-existing knowledge and is useful for straightforward tasks where the AI is expected to know the answer or perform the task without additional context.\n\nExamples:\n\n * \"Explain the difference between FIFO and LIFO inventory valuation methods.\"\n\n * \"List the main components of a balance sheet.\"\n\n * \"Describe the purpose of an audit trail in accounting.\"\n\nFew-shot Prompting\n\nFew-shot prompting involves providing the AI with a few examples before asking it to complete a task. This technique is particularly useful when the task is complex or requires the AI to follow a specific pattern.\n\nExamples:\n\n * Show the AI a few examples of correctly formatted journal entries, then asking it to create new entries for specific transactions. This approach might look like this (you would paste everything below into a single prompt):\n\nTransaction 1: Purchase of office supplies on account for $500.\n\nJournal Entry:\n\nDate: 01/15/2024\n\nAccount Titles and Explanation: Office Supplies\n\nDebit: $500\n\nCredit: Accounts Payable $500\n\n(Purchased office supplies on account)\n\nTransaction 2: Payment of $1,200 for a monthly rent.\n\nJournal Entry:\n\nDate: 01/20/2024\n\nAccount Titles and Explanation: Rent Expense\n\nDebit: $1,200\n\nCredit: Cash $1,200\n\n(Paid monthly rent)\n\nQuestion: What is the journal entry for Payment of $800 for utilities.\n\nWhen using the few-shot prompting technique, you should experiment with how many examples to provide to get the output you want. Sometimes only a few examples are needed and other times providing many examples results in better outputs.\n\nChain-of-Thought Prompting\n\nChain-of-thought prompting guides the AI through a step-by-step reasoning process. This is especially useful in accounting scenarios where decision-making involves multiple steps or considerations.\n\nExamples:\n\n * \"To determine if we need to recognize a deferred tax asset, let's consider: 1. Are there deductible temporary differences? 2. What's the likelihood of future taxable income? 3. Are there any tax planning strategies available?”\"\n\n * \"To assess the collectability of accounts receivable: 1. Review the aging of receivables. 2. Analyze historical collection patterns. 3. Consider current economic conditions. 4. Evaluate specific customer information.\"\n\n * \"To decide on the most appropriate cost allocation method for a manufacturing company: 1. Identify the main cost drivers. 2. Assess the complexity of the production process. 3. Consider the diversity of products. 4. Evaluate the impact on pricing decisions.\"\n\nChain-of-thought prompting can be written as a zero-shot prompt or written as a few-shot prompt—if examples are included. One of the simplest ways to convert a zero-shot prompt into a chain-of-thought prompt is by including the phrase \"show your work\" in the prompt. This signals to the AI that you're not just interested in the final answer, but also in the reasoning process it used to arrive at that answer.\n\n----------------------------------------"
  },
  {
    "pageId": "PROMPT_ENGINEERING\\learning-module\\4-summary-of-techniques.tsx",
    "text": "Summary of Prompting Techniques\n\n----------------------------------------\n\nTechniqueStrengthsWeaknessesBest Use CasePreparation RequiredOutput ConsistencyZero-shot Prompting\n * Quick and straightforward\n * Relies on model's existing knowledge\n * Useful for simple, direct tasks\n\n * May lack specificity\n * Less effective for complex tasks\n * Potential for misunderstanding context\n\n * General knowledge questions\n * Simple classifications\n * Basic text generation\n\nMinimal - just formulating the promptCan vary depending on prompt clarityFew-shot Prompting\n * Provides context through examples\n * Improves accuracy for specific patterns\n * Effective for complex or nuanced tasks\n\n * Requires preparation of examples\n * May introduce bias from examples\n * Can be time-consuming to set up\n\n * Specific formatting tasks\n * Domain-specific queries\n * Tasks requiring consistent output structure\n\nModerate - need to prepare relevant examplesGenerally high, especially with well-chosen examplesChain-of-thought Prompting\n * Guides through complex reasoning\n * Improves transparency of AI's process\n * Useful for multi-step problem-solving\n\n * Can be lengthy and time-consuming\n * May oversimplify complex issues\n * Requires careful structuring of prompts\n\n * Complex problem-solving\n * Decision-making processes\n * Explanations of reasoning\n\nHigh - need to outline step-by-step thought processHigh for reasoning process, may vary in final conclusions\n\n----------------------------------------"
  },
  {
    "pageId": "PROMPT_ENGINEERING\\learning-module\\6-advanced-techniques.tsx",
    "text": "Advanced Prompting Techniques\n\n----------------------------------------\n\nBuilding on the foundational skills of prompt engineering, we now move into more advanced techniques that allow you to harness AI tools in increasingly sophisticated ways. These techniques are designed to tackle more complex tasks, handle nuanced situations, and generate highly specific outputs. Mastering these methods can significantly expand your ability to use GenAI effectively in a variety of accounting contexts.\n\nOne advanced technique is role prompting, where you instruct the AI to take on a specific role or perspective when generating responses. This can be particularly useful in accounting scenarios that require a nuanced understanding of the subject matter. For example, you might prompt the GenAI to “Act as a tax advisor and draft a response to a client inquiry about potential deductions for small businesses.” By assigning a role to the GenAI (to be a tax advisor), you can guide it to produce more contextually appropriate and informed responses.\n\nMulti-step prompting is another powerful approach, especially for tasks that require a sequence of actions or decisions. This technique involves guiding the GenAI through a series of individual prompts, each addressing a specific aspect of the overall task. In accounting, this might involve guiding the GenAI through a series of steps to perform a complex analysis. For instance, when conducting a financial risk assessment, you might first prompt the GenAI to identify potential risk factors, then to analyze these risks based on historical data, and finally to recommend mitigation strategies. By breaking down the task into smaller, manageable steps, multi-step prompting ensures that the GenAI’s output is both thorough and logically structured.\n\nConstrained prompting involves setting specific parameters or limitations within which the GenAI must operate. This technique is valuable when you need precise, targeted outputs. In accounting, you might use constrained prompting to restrict the GenAI’s analysis to a particular set of data or to ensure compliance with specific regulatory guidelines. For example, you could prompt the GenAI to “Review this financial statement but focus only on cash flow inconsistencies without considering revenue or expense fluctuations.” Constrained prompts help ensure that the AI remains focused on the most relevant aspects of a task, reducing the risk of irrelevant or extraneous information.\n\nRecursive prompting is particularly useful when dealing with complex, iterative tasks. This technique involves using the output from one prompt as the input for another, allowing you to refine and build upon the GenAI’s responses iteratively. In an audit scenario, for instance, you might first prompt the GenAI to generate a list of potential discrepancies in financial records. Then, you could take that list and prompt the GenAI to provide detailed explanations or justifications for each item, effectively deepening the analysis with each iteration. As another example, you might ask the GenAI to provide a list of common writing errors in professional reports. You could then use that list in a follow-up prompt, asking the GenAI to proofread your report.\n\nAdversarial prompting is an advanced technique where you challenge the GenAI’s responses by intentionally providing counterarguments or conflicting information to test the robustness of its outputs. This is particularly useful in scenarios where accuracy is critical, such as fraud detection or compliance checks. By presenting the GenAI with hypothetical situations or conflicting data, you can assess how well it handles ambiguity and complexity, thereby ensuring that the final output is reliable.\n\nTechniqueDescriptionKey BenefitsExample Use in AccountingRole PromptingInstructs the AI to take on a specific role or perspective when generating responses\n * Produces more contextually appropriate responses\n * Enhances subject-specific outputs\n * Improves relevance to specific scenarios\n\n“Act as a tax advisor and draft a response to a client inquiry about potential deductions for small businesses”Multi-step PromptingGuides the AI through a series of individual prompts, each addressing a specific aspect of the overall task\n * Ensures thorough and logically structured output\n * Breaks complex tasks into manageable steps\n * Allows for more comprehensive analysis\n\nConducting a financial risk assessment:\n1. Identify potential risk factors\n2. Analyze risks based on historical data\n3. Recommend mitigation strategiesConstrained PromptingSets specific parameters or limitations within which the AI must operate\n * Produces precise, targeted outputs\n * Ensures focus on relevant aspects\n * Helps maintain compliance with specific guidelines\n\n“Review this financial statement but focus only on cash flow inconsistencies without considering revenue or expense fluctuations”Recursive PromptingUses the output from one prompt as the input for another, allowing for iterative refinement\n * Deepens analysis through iteration\n * Allows for progressive refinement of outputs\n * Useful for complex, multi-layered tasks\n\n1. Generate a list of potential discrepancies in financial records\n2. Provide detailed explanations for each discrepancy\n3. Suggest corrective actions for each explanationAdversarial PromptingChallenges the AI’s responses by providing counterarguments or conflicting information\n * Tests robustness of AI outputs\n * Enhances accuracy in critical scenarios\n * Useful for assessing AI’s handling of ambiguity and complexity\n\nPresent conflicting financial data in a fraud detection scenario to test the AI’s ability to identify inconsistencies and potential fraudulent activities\n\n----------------------------------------"
  },
  {
    "pageId": "PROMPT_ENGINEERING\\learning-module\\8-ethics.tsx",
    "text": "Prompting Ethics\n\n----------------------------------------\n\n\n\n----------------------------------------"
  },
  {
    "pageId": "PROMPT_ENGINEERING\\learning-module\\9-applications.tsx",
    "text": "Applications in Accounting\n\n----------------------------------------\n\nNow that you know the basics of prompt engineering, we will provide numerous examples of how you can use it in various accounting settings. The purpose of this section is to help you start to generate ideas of how you can use GenAI in your day-to-day work. These examples focus on simple tasks that many accountants perform. As you review these examples, write down other ideas you want to try in your own work. Also, carefully review the prompts so you can see best practices of how the prompting techniques you have learned can be used to enhance your work. We'll cover the following areas:\n\n * Data Analysis and Risk Management\n\n * Reporting and Documentation\n\n * Communication and Content Creation\n\n * Training and Development\n\nFor each area, we'll provide examples, discuss the role of GenAI, and present a hypothetical prompt along with an explanation of its effectiveness.\n\n----------------------------------------"
  }
]